
C:\Users\Divesh Dutt\Desktop\VCP TIM1 Template\Debug\VCP TIM1 Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002488  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002614  08002614  00012614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002670  08002670  00012670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002678  08002678  00012678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800267c  0800267c  0001267c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08002680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000d0  20000004  08002684  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000d4  08002684  000200d4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000dfa0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fa9  00000000  00000000  0002dfd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007b89  00000000  00000000  0002ff7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a48  00000000  00000000  00037b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ce0  00000000  00000000  00038550  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005086  00000000  00000000  00039230  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003e4a  00000000  00000000  0003e2b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00042100  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001d54  00000000  00000000  00042180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000004 	.word	0x20000004
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080025fc 	.word	0x080025fc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000008 	.word	0x20000008
 80001c8:	080025fc 	.word	0x080025fc

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b97e 	b.w	80004e0 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	468c      	mov	ip, r1
 8000202:	460e      	mov	r6, r1
 8000204:	4604      	mov	r4, r0
 8000206:	9d08      	ldr	r5, [sp, #32]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d150      	bne.n	80002ae <__udivmoddi4+0xb2>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d96c      	bls.n	80002ec <__udivmoddi4+0xf0>
 8000212:	fab2 fe82 	clz	lr, r2
 8000216:	f1be 0f00 	cmp.w	lr, #0
 800021a:	d00b      	beq.n	8000234 <__udivmoddi4+0x38>
 800021c:	f1ce 0420 	rsb	r4, lr, #32
 8000220:	fa20 f404 	lsr.w	r4, r0, r4
 8000224:	fa01 f60e 	lsl.w	r6, r1, lr
 8000228:	ea44 0c06 	orr.w	ip, r4, r6
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	fa00 f40e 	lsl.w	r4, r0, lr
 8000234:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000238:	0c22      	lsrs	r2, r4, #16
 800023a:	fbbc f0f9 	udiv	r0, ip, r9
 800023e:	fa1f f887 	uxth.w	r8, r7
 8000242:	fb09 c610 	mls	r6, r9, r0, ip
 8000246:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 800024a:	fb00 f308 	mul.w	r3, r0, r8
 800024e:	42b3      	cmp	r3, r6
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x6a>
 8000252:	19f6      	adds	r6, r6, r7
 8000254:	f100 32ff 	add.w	r2, r0, #4294967295
 8000258:	f080 8122 	bcs.w	80004a0 <__udivmoddi4+0x2a4>
 800025c:	42b3      	cmp	r3, r6
 800025e:	f240 811f 	bls.w	80004a0 <__udivmoddi4+0x2a4>
 8000262:	3802      	subs	r0, #2
 8000264:	443e      	add	r6, r7
 8000266:	1af6      	subs	r6, r6, r3
 8000268:	b2a2      	uxth	r2, r4
 800026a:	fbb6 f3f9 	udiv	r3, r6, r9
 800026e:	fb09 6613 	mls	r6, r9, r3, r6
 8000272:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000276:	fb03 f808 	mul.w	r8, r3, r8
 800027a:	45a0      	cmp	r8, r4
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x96>
 800027e:	19e4      	adds	r4, r4, r7
 8000280:	f103 32ff 	add.w	r2, r3, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x2a0>
 8000288:	45a0      	cmp	r8, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x2a0>
 800028e:	3b02      	subs	r3, #2
 8000290:	443c      	add	r4, r7
 8000292:	ebc8 0404 	rsb	r4, r8, r4
 8000296:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	2d00      	cmp	r5, #0
 800029e:	d062      	beq.n	8000366 <__udivmoddi4+0x16a>
 80002a0:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a4:	2300      	movs	r3, #0
 80002a6:	602c      	str	r4, [r5, #0]
 80002a8:	606b      	str	r3, [r5, #4]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d907      	bls.n	80002c2 <__udivmoddi4+0xc6>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	d055      	beq.n	8000362 <__udivmoddi4+0x166>
 80002b6:	2100      	movs	r1, #0
 80002b8:	e885 0041 	stmia.w	r5, {r0, r6}
 80002bc:	4608      	mov	r0, r1
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	f040 8090 	bne.w	80003ec <__udivmoddi4+0x1f0>
 80002cc:	42b3      	cmp	r3, r6
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xda>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb66 0603 	sbc.w	r6, r6, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	46b4      	mov	ip, r6
 80002e0:	2d00      	cmp	r5, #0
 80002e2:	d040      	beq.n	8000366 <__udivmoddi4+0x16a>
 80002e4:	e885 1010 	stmia.w	r5, {r4, ip}
 80002e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ec:	b912      	cbnz	r2, 80002f4 <__udivmoddi4+0xf8>
 80002ee:	2701      	movs	r7, #1
 80002f0:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f4:	fab7 fe87 	clz	lr, r7
 80002f8:	f1be 0f00 	cmp.w	lr, #0
 80002fc:	d135      	bne.n	800036a <__udivmoddi4+0x16e>
 80002fe:	1bf3      	subs	r3, r6, r7
 8000300:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb3 f0f8 	udiv	r0, r3, r8
 800030e:	0c22      	lsrs	r2, r4, #16
 8000310:	fb08 3610 	mls	r6, r8, r0, r3
 8000314:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000318:	fb0c f300 	mul.w	r3, ip, r0
 800031c:	42b3      	cmp	r3, r6
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x134>
 8000320:	19f6      	adds	r6, r6, r7
 8000322:	f100 32ff 	add.w	r2, r0, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x132>
 8000328:	42b3      	cmp	r3, r6
 800032a:	f200 80ce 	bhi.w	80004ca <__udivmoddi4+0x2ce>
 800032e:	4610      	mov	r0, r2
 8000330:	1af6      	subs	r6, r6, r3
 8000332:	b2a2      	uxth	r2, r4
 8000334:	fbb6 f3f8 	udiv	r3, r6, r8
 8000338:	fb08 6613 	mls	r6, r8, r3, r6
 800033c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000340:	fb0c fc03 	mul.w	ip, ip, r3
 8000344:	45a4      	cmp	ip, r4
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x15c>
 8000348:	19e4      	adds	r4, r4, r7
 800034a:	f103 32ff 	add.w	r2, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x15a>
 8000350:	45a4      	cmp	ip, r4
 8000352:	f200 80b5 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 8000356:	4613      	mov	r3, r2
 8000358:	ebcc 0404 	rsb	r4, ip, r4
 800035c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000360:	e79c      	b.n	800029c <__udivmoddi4+0xa0>
 8000362:	4629      	mov	r1, r5
 8000364:	4628      	mov	r0, r5
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	f1ce 0120 	rsb	r1, lr, #32
 800036e:	fa06 f30e 	lsl.w	r3, r6, lr
 8000372:	fa07 f70e 	lsl.w	r7, r7, lr
 8000376:	fa20 f901 	lsr.w	r9, r0, r1
 800037a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800037e:	40ce      	lsrs	r6, r1
 8000380:	ea49 0903 	orr.w	r9, r9, r3
 8000384:	fbb6 faf8 	udiv	sl, r6, r8
 8000388:	ea4f 4419 	mov.w	r4, r9, lsr #16
 800038c:	fb08 661a 	mls	r6, r8, sl, r6
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000398:	fb0a f20c 	mul.w	r2, sl, ip
 800039c:	429a      	cmp	r2, r3
 800039e:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a2:	d90a      	bls.n	80003ba <__udivmoddi4+0x1be>
 80003a4:	19db      	adds	r3, r3, r7
 80003a6:	f10a 31ff 	add.w	r1, sl, #4294967295
 80003aa:	f080 8087 	bcs.w	80004bc <__udivmoddi4+0x2c0>
 80003ae:	429a      	cmp	r2, r3
 80003b0:	f240 8084 	bls.w	80004bc <__udivmoddi4+0x2c0>
 80003b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80003b8:	443b      	add	r3, r7
 80003ba:	1a9b      	subs	r3, r3, r2
 80003bc:	fa1f f989 	uxth.w	r9, r9
 80003c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80003c4:	fb08 3311 	mls	r3, r8, r1, r3
 80003c8:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 80003cc:	fb01 f60c 	mul.w	r6, r1, ip
 80003d0:	429e      	cmp	r6, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x1e8>
 80003d4:	19db      	adds	r3, r3, r7
 80003d6:	f101 32ff 	add.w	r2, r1, #4294967295
 80003da:	d26b      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 80003dc:	429e      	cmp	r6, r3
 80003de:	d969      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 80003e0:	3902      	subs	r1, #2
 80003e2:	443b      	add	r3, r7
 80003e4:	1b9b      	subs	r3, r3, r6
 80003e6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80003ea:	e78e      	b.n	800030a <__udivmoddi4+0x10e>
 80003ec:	f1c1 0e20 	rsb	lr, r1, #32
 80003f0:	fa22 f40e 	lsr.w	r4, r2, lr
 80003f4:	408b      	lsls	r3, r1
 80003f6:	4323      	orrs	r3, r4
 80003f8:	fa20 f70e 	lsr.w	r7, r0, lr
 80003fc:	fa06 f401 	lsl.w	r4, r6, r1
 8000400:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000404:	fa26 f60e 	lsr.w	r6, r6, lr
 8000408:	433c      	orrs	r4, r7
 800040a:	fbb6 f9fc 	udiv	r9, r6, ip
 800040e:	0c27      	lsrs	r7, r4, #16
 8000410:	fb0c 6619 	mls	r6, ip, r9, r6
 8000414:	fa1f f883 	uxth.w	r8, r3
 8000418:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 800041c:	fb09 f708 	mul.w	r7, r9, r8
 8000420:	42b7      	cmp	r7, r6
 8000422:	fa02 f201 	lsl.w	r2, r2, r1
 8000426:	fa00 fa01 	lsl.w	sl, r0, r1
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x242>
 800042c:	18f6      	adds	r6, r6, r3
 800042e:	f109 30ff 	add.w	r0, r9, #4294967295
 8000432:	d241      	bcs.n	80004b8 <__udivmoddi4+0x2bc>
 8000434:	42b7      	cmp	r7, r6
 8000436:	d93f      	bls.n	80004b8 <__udivmoddi4+0x2bc>
 8000438:	f1a9 0902 	sub.w	r9, r9, #2
 800043c:	441e      	add	r6, r3
 800043e:	1bf6      	subs	r6, r6, r7
 8000440:	b2a0      	uxth	r0, r4
 8000442:	fbb6 f4fc 	udiv	r4, r6, ip
 8000446:	fb0c 6614 	mls	r6, ip, r4, r6
 800044a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 800044e:	fb04 f808 	mul.w	r8, r4, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26a>
 8000456:	18ff      	adds	r7, r7, r3
 8000458:	f104 30ff 	add.w	r0, r4, #4294967295
 800045c:	d228      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d926      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 8000462:	3c02      	subs	r4, #2
 8000464:	441f      	add	r7, r3
 8000466:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 800046a:	ebc8 0707 	rsb	r7, r8, r7
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	4644      	mov	r4, r8
 8000476:	464e      	mov	r6, r9
 8000478:	d314      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	d029      	beq.n	80004d0 <__udivmoddi4+0x2d4>
 800047c:	b365      	cbz	r5, 80004d8 <__udivmoddi4+0x2dc>
 800047e:	ebba 0304 	subs.w	r3, sl, r4
 8000482:	eb67 0706 	sbc.w	r7, r7, r6
 8000486:	fa07 fe0e 	lsl.w	lr, r7, lr
 800048a:	40cb      	lsrs	r3, r1
 800048c:	40cf      	lsrs	r7, r1
 800048e:	ea4e 0303 	orr.w	r3, lr, r3
 8000492:	e885 0088 	stmia.w	r5, {r3, r7}
 8000496:	2100      	movs	r1, #0
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	4613      	mov	r3, r2
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x96>
 80004a0:	4610      	mov	r0, r2
 80004a2:	e6e0      	b.n	8000266 <__udivmoddi4+0x6a>
 80004a4:	ebb8 0402 	subs.w	r4, r8, r2
 80004a8:	eb69 0603 	sbc.w	r6, r9, r3
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7e5      	b.n	800047c <__udivmoddi4+0x280>
 80004b0:	4604      	mov	r4, r0
 80004b2:	e7d8      	b.n	8000466 <__udivmoddi4+0x26a>
 80004b4:	4611      	mov	r1, r2
 80004b6:	e795      	b.n	80003e4 <__udivmoddi4+0x1e8>
 80004b8:	4681      	mov	r9, r0
 80004ba:	e7c0      	b.n	800043e <__udivmoddi4+0x242>
 80004bc:	468a      	mov	sl, r1
 80004be:	e77c      	b.n	80003ba <__udivmoddi4+0x1be>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e748      	b.n	8000358 <__udivmoddi4+0x15c>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xe4>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443e      	add	r6, r7
 80004ce:	e72f      	b.n	8000330 <__udivmoddi4+0x134>
 80004d0:	45c2      	cmp	sl, r8
 80004d2:	d3e7      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80004d4:	463e      	mov	r6, r7
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x280>
 80004d8:	4629      	mov	r1, r5
 80004da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004e6:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004ea:	6818      	ldr	r0, [r3, #0]
 80004ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f4:	f000 f878 	bl	80005e8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80004f8:	2200      	movs	r2, #0
 80004fa:	4621      	mov	r1, r4
 80004fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000500:	f000 f83e 	bl	8000580 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000504:	2000      	movs	r0, #0
 8000506:	bd10      	pop	{r4, pc}
 8000508:	20000000 	.word	0x20000000

0800050c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800050c:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050e:	2003      	movs	r0, #3
 8000510:	f000 f824 	bl	800055c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff ffe5 	bl	80004e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800051a:	f001 ff4f 	bl	80023bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800051e:	2000      	movs	r0, #0
 8000520:	bd08      	pop	{r3, pc}
	...

08000524 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000524:	4a02      	ldr	r2, [pc, #8]	; (8000530 <HAL_IncTick+0xc>)
 8000526:	6813      	ldr	r3, [r2, #0]
 8000528:	3301      	adds	r3, #1
 800052a:	6013      	str	r3, [r2, #0]
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000024 	.word	0x20000024

08000534 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000534:	4b01      	ldr	r3, [pc, #4]	; (800053c <HAL_GetTick+0x8>)
 8000536:	6818      	ldr	r0, [r3, #0]
}
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000024 	.word	0x20000024

08000540 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000540:	b538      	push	{r3, r4, r5, lr}
 8000542:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000544:	f7ff fff6 	bl	8000534 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000548:	1c63      	adds	r3, r4, #1
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
  uint32_t tickstart = HAL_GetTick();
 800054a:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 800054c:	bf18      	it	ne
 800054e:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000550:	f7ff fff0 	bl	8000534 <HAL_GetTick>
 8000554:	1b40      	subs	r0, r0, r5
 8000556:	4284      	cmp	r4, r0
 8000558:	d8fa      	bhi.n	8000550 <HAL_Delay+0x10>
  {
  }
}
 800055a:	bd38      	pop	{r3, r4, r5, pc}

0800055c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800055c:	4a07      	ldr	r2, [pc, #28]	; (800057c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800055e:	68d3      	ldr	r3, [r2, #12]
 8000560:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000564:	041b      	lsls	r3, r3, #16
 8000566:	0c1b      	lsrs	r3, r3, #16
 8000568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800056c:	0200      	lsls	r0, r0, #8
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000576:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000578:	60d3      	str	r3, [r2, #12]
 800057a:	4770      	bx	lr
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000580:	4b17      	ldr	r3, [pc, #92]	; (80005e0 <HAL_NVIC_SetPriority+0x60>)
 8000582:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000584:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000588:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800058a:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800058e:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000590:	2c04      	cmp	r4, #4
 8000592:	bf28      	it	cs
 8000594:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000596:	2d06      	cmp	r5, #6

  return (
 8000598:	f04f 0501 	mov.w	r5, #1
 800059c:	fa05 f404 	lsl.w	r4, r5, r4
 80005a0:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005a4:	bf8c      	ite	hi
 80005a6:	3b03      	subhi	r3, #3
 80005a8:	2300      	movls	r3, #0

  return (
 80005aa:	400c      	ands	r4, r1
 80005ac:	409c      	lsls	r4, r3
 80005ae:	fa05 f303 	lsl.w	r3, r5, r3
 80005b2:	3b01      	subs	r3, #1
 80005b4:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80005b6:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80005b8:	ea42 0204 	orr.w	r2, r2, r4
 80005bc:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c0:	bfaf      	iteee	ge
 80005c2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005c6:	f000 000f 	andlt.w	r0, r0, #15
 80005ca:	4b06      	ldrlt	r3, [pc, #24]	; (80005e4 <HAL_NVIC_SetPriority+0x64>)
 80005cc:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ce:	bfa5      	ittet	ge
 80005d0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005d4:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d6:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005d8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	bf00      	nop
 80005e0:	e000ed00 	.word	0xe000ed00
 80005e4:	e000ed14 	.word	0xe000ed14

080005e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005e8:	3801      	subs	r0, #1
 80005ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005ee:	d20a      	bcs.n	8000606 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005f4:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f6:	21f0      	movs	r1, #240	; 0xf0
 80005f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005fe:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000600:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000606:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000e010 	.word	0xe000e010
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000614:	4b04      	ldr	r3, [pc, #16]	; (8000628 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000616:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000618:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800061a:	bf0c      	ite	eq
 800061c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000620:	f022 0204 	bicne.w	r2, r2, #4
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	4770      	bx	lr
 8000628:	e000e010 	.word	0xe000e010

0800062c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800062c:	4770      	bx	lr

0800062e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800062e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000630:	f7ff fffc 	bl	800062c <HAL_SYSTICK_Callback>
 8000634:	bd08      	pop	{r3, pc}
	...

08000638 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800063c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800063e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000640:	f8df c168 	ldr.w	ip, [pc, #360]	; 80007ac <HAL_GPIO_Init+0x174>
 8000644:	4c57      	ldr	r4, [pc, #348]	; (80007a4 <HAL_GPIO_Init+0x16c>)
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000646:	9301      	str	r3, [sp, #4]
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000648:	f04f 080f 	mov.w	r8, #15
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 800064c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800064e:	9a01      	ldr	r2, [sp, #4]
 8000650:	40da      	lsrs	r2, r3
 8000652:	f000 80a4 	beq.w	800079e <HAL_GPIO_Init+0x166>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000656:	2201      	movs	r2, #1
 8000658:	fa02 f903 	lsl.w	r9, r2, r3

    if(iocurrent)
 800065c:	9a01      	ldr	r2, [sp, #4]
 800065e:	ea12 0509 	ands.w	r5, r2, r9
 8000662:	f000 809a 	beq.w	800079a <HAL_GPIO_Init+0x162>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000666:	684a      	ldr	r2, [r1, #4]
 8000668:	f022 0a10 	bic.w	sl, r2, #16
 800066c:	f1ba 0f02 	cmp.w	sl, #2
 8000670:	d113      	bne.n	800069a <HAL_GPIO_Init+0x62>
 8000672:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8000676:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800067a:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800067e:	f8de 7020 	ldr.w	r7, [lr, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000682:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000686:	fa08 f60b 	lsl.w	r6, r8, fp
 800068a:	ea27 0706 	bic.w	r7, r7, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800068e:	690e      	ldr	r6, [r1, #16]
 8000690:	fa06 f60b 	lsl.w	r6, r6, fp
 8000694:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3] = temp;
 8000696:	f8ce 6020 	str.w	r6, [lr, #32]
 800069a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 800069e:	2603      	movs	r6, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80006a0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80006a2:	fa06 f60e 	lsl.w	r6, r6, lr
 80006a6:	43f6      	mvns	r6, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80006a8:	f002 0b03 	and.w	fp, r2, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80006ac:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80006ae:	fa0b fb0e 	lsl.w	fp, fp, lr
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006b2:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80006b6:	ea4b 0707 	orr.w	r7, fp, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006ba:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 80006be:	6007      	str	r7, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80006c0:	d811      	bhi.n	80006e6 <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80006c2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80006c4:	ea06 0a07 	and.w	sl, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80006c8:	68cf      	ldr	r7, [r1, #12]
 80006ca:	fa07 f70e 	lsl.w	r7, r7, lr
 80006ce:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80006d2:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80006d4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80006d6:	ea27 0909 	bic.w	r9, r7, r9
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80006da:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80006de:	409f      	lsls	r7, r3
 80006e0:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 80006e4:	6047      	str	r7, [r0, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80006e6:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 80006e8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80006ea:	688f      	ldr	r7, [r1, #8]
 80006ec:	fa07 f70e 	lsl.w	r7, r7, lr
 80006f0:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 80006f2:	60c6      	str	r6, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80006f4:	00d6      	lsls	r6, r2, #3
 80006f6:	d550      	bpl.n	800079a <HAL_GPIO_Init+0x162>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f8:	f8dc 6060 	ldr.w	r6, [ip, #96]	; 0x60
 80006fc:	f046 0601 	orr.w	r6, r6, #1
 8000700:	f8cc 6060 	str.w	r6, [ip, #96]	; 0x60
 8000704:	f8dc 6060 	ldr.w	r6, [ip, #96]	; 0x60
 8000708:	f006 0601 	and.w	r6, r6, #1
 800070c:	9603      	str	r6, [sp, #12]
 800070e:	9e03      	ldr	r6, [sp, #12]
 8000710:	f023 0603 	bic.w	r6, r3, #3
 8000714:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000718:	f506 3680 	add.w	r6, r6, #65536	; 0x10000

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800071c:	f003 0903 	and.w	r9, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 8000720:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000722:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8000726:	fa08 fe09 	lsl.w	lr, r8, r9
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800072a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800072e:	ea27 0a0e 	bic.w	sl, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000732:	d00b      	beq.n	800074c <HAL_GPIO_Init+0x114>
 8000734:	4f1c      	ldr	r7, [pc, #112]	; (80007a8 <HAL_GPIO_Init+0x170>)
 8000736:	42b8      	cmp	r0, r7
 8000738:	d00b      	beq.n	8000752 <HAL_GPIO_Init+0x11a>
 800073a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800073e:	42b8      	cmp	r0, r7
 8000740:	bf14      	ite	ne
 8000742:	f04f 0e07 	movne.w	lr, #7
 8000746:	f04f 0e02 	moveq.w	lr, #2
 800074a:	e004      	b.n	8000756 <HAL_GPIO_Init+0x11e>
 800074c:	f04f 0e00 	mov.w	lr, #0
 8000750:	e001      	b.n	8000756 <HAL_GPIO_Init+0x11e>
 8000752:	f04f 0e01 	mov.w	lr, #1
 8000756:	fa0e f909 	lsl.w	r9, lr, r9
 800075a:	ea49 070a 	orr.w	r7, r9, sl
        SYSCFG->EXTICR[position >> 2] = temp;
 800075e:	60b7      	str	r7, [r6, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000760:	4e10      	ldr	r6, [pc, #64]	; (80007a4 <HAL_GPIO_Init+0x16c>)
 8000762:	6836      	ldr	r6, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 8000764:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000766:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
        temp &= ~((uint32_t)iocurrent);
 800076a:	bf0c      	ite	eq
 800076c:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 800076e:	432e      	orrne	r6, r5
        }
        EXTI->IMR1 = temp;
 8000770:	6026      	str	r6, [r4, #0]

        temp = EXTI->EMR1;
 8000772:	6866      	ldr	r6, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000774:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;

        temp = EXTI->EMR1;
        temp &= ~((uint32_t)iocurrent);
 8000778:	bf0c      	ite	eq
 800077a:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800077c:	432e      	orrne	r6, r5
        }
        EXTI->EMR1 = temp;
 800077e:	6066      	str	r6, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000780:	68a6      	ldr	r6, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000782:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~((uint32_t)iocurrent);
 8000786:	bf0c      	ite	eq
 8000788:	403e      	andeq	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 800078a:	432e      	orrne	r6, r5
        }
        EXTI->RTSR1 = temp;
 800078c:	60a6      	str	r6, [r4, #8]

        temp = EXTI->FTSR1;
 800078e:	68e6      	ldr	r6, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000790:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;

        temp = EXTI->FTSR1;
        temp &= ~((uint32_t)iocurrent);
 8000792:	bf54      	ite	pl
 8000794:	403e      	andpl	r6, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000796:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR1 = temp;
 8000798:	60e6      	str	r6, [r4, #12]
      }
    }
    
    position++;
 800079a:	3301      	adds	r3, #1
 800079c:	e757      	b.n	800064e <HAL_GPIO_Init+0x16>
  }
}
 800079e:	b005      	add	sp, #20
 80007a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80007a4:	40010400 	.word	0x40010400
 80007a8:	48000400 	.word	0x48000400
 80007ac:	40021000 	.word	0x40021000

080007b0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80007b0:	6903      	ldr	r3, [r0, #16]
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80007b2:	4219      	tst	r1, r3
}
 80007b4:	bf14      	ite	ne
 80007b6:	2001      	movne	r0, #1
 80007b8:	2000      	moveq	r0, #0
 80007ba:	4770      	bx	lr

080007bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007bc:	b10a      	cbz	r2, 80007c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007be:	6181      	str	r1, [r0, #24]
 80007c0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007c2:	6281      	str	r1, [r0, #40]	; 0x28
 80007c4:	4770      	bx	lr
	...

080007c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return  (PWR->CR1 & PWR_CR1_VOS);
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <HAL_PWREx_GetVoltageRange+0xc>)
 80007ca:	6818      	ldr	r0, [r3, #0]
}
 80007cc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40007000 	.word	0x40007000

080007d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80007d8:	4b17      	ldr	r3, [pc, #92]	; (8000838 <HAL_PWREx_ControlVoltageScaling+0x60>)
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007da:	681a      	ldr	r2, [r3, #0]
  uint32_t wait_loop_index = 0;  

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80007dc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007e0:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  uint32_t wait_loop_index = 0;  

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
  
  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80007e4:	d11a      	bne.n	800081c <HAL_PWREx_ControlVoltageScaling+0x44>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80007e6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80007ea:	d020      	beq.n	800082e <HAL_PWREx_ControlVoltageScaling+0x56>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ec:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80007ee:	4913      	ldr	r1, [pc, #76]	; (800083c <HAL_PWREx_ControlVoltageScaling+0x64>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80007f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80007f8:	601a      	str	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80007fa:	4a11      	ldr	r2, [pc, #68]	; (8000840 <HAL_PWREx_ControlVoltageScaling+0x68>)
 80007fc:	6812      	ldr	r2, [r2, #0]
 80007fe:	fbb2 f1f1 	udiv	r1, r2, r1
 8000802:	2232      	movs	r2, #50	; 0x32
 8000804:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8000806:	b122      	cbz	r2, 8000812 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8000808:	6959      	ldr	r1, [r3, #20]
 800080a:	0549      	lsls	r1, r1, #21
 800080c:	d501      	bpl.n	8000812 <HAL_PWREx_ControlVoltageScaling+0x3a>
      {
        wait_loop_index--;
 800080e:	3a01      	subs	r2, #1
 8000810:	e7f9      	b.n	8000806 <HAL_PWREx_ControlVoltageScaling+0x2e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <HAL_PWREx_ControlVoltageScaling+0x60>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	055b      	lsls	r3, r3, #21
 8000818:	d40b      	bmi.n	8000832 <HAL_PWREx_ControlVoltageScaling+0x5a>
 800081a:	e008      	b.n	800082e <HAL_PWREx_ControlVoltageScaling+0x56>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800081c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000820:	bf1f      	itttt	ne
 8000822:	681a      	ldrne	r2, [r3, #0]
 8000824:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8000828:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 800082c:	601a      	strne	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
 800082e:	2000      	movs	r0, #0
 8000830:	4770      	bx	lr
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
      {
        return HAL_TIMEOUT;
 8000832:	2003      	movs	r0, #3
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  
  return HAL_OK;
}  
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40007000 	.word	0x40007000
 800083c:	000f4240 	.word	0x000f4240
 8000840:	20000000 	.word	0x20000000

08000844 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8000844:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000846:	4d1e      	ldr	r5, [pc, #120]	; (80008c0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000848:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800084a:	00d9      	lsls	r1, r3, #3
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800084c:	4604      	mov	r4, r0
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800084e:	d502      	bpl.n	8000856 <RCC_SetFlashLatencyFromMSIRange+0x12>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8000850:	f7ff ffba 	bl	80007c8 <HAL_PWREx_GetVoltageRange>
 8000854:	e00e      	b.n	8000874 <RCC_SetFlashLatencyFromMSIRange+0x30>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085c:	65ab      	str	r3, [r5, #88]	; 0x58
 800085e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000864:	9301      	str	r3, [sp, #4]
 8000866:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8000868:	f7ff ffae 	bl	80007c8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800086c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800086e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000872:	65ab      	str	r3, [r5, #88]	; 0x58
  }
  
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000874:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000878:	d106      	bne.n	8000888 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    if(msirange > RCC_MSIRANGE_8)
 800087a:	2c80      	cmp	r4, #128	; 0x80
 800087c:	d90c      	bls.n	8000898 <RCC_SetFlashLatencyFromMSIRange+0x54>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800087e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8000880:	bf8c      	ite	hi
 8000882:	2302      	movhi	r3, #2
 8000884:	2301      	movls	r3, #1
 8000886:	e00c      	b.n	80008a2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if(msirange > RCC_MSIRANGE_8)
 8000888:	2c80      	cmp	r4, #128	; 0x80
 800088a:	d807      	bhi.n	800089c <RCC_SetFlashLatencyFromMSIRange+0x58>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800088c:	d008      	beq.n	80008a0 <RCC_SetFlashLatencyFromMSIRange+0x5c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800088e:	f1a4 0270 	sub.w	r2, r4, #112	; 0x70
 8000892:	4253      	negs	r3, r2
 8000894:	4153      	adcs	r3, r2
 8000896:	e004      	b.n	80008a2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8000898:	2300      	movs	r3, #0
 800089a:	e002      	b.n	80008a2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  else
  {
    if(msirange > RCC_MSIRANGE_8)
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800089c:	2303      	movs	r3, #3
 800089e:	e000      	b.n	80008a2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80008a0:	2302      	movs	r3, #2
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
  }
       
  __HAL_FLASH_SET_LATENCY(latency);
 80008a2:	4908      	ldr	r1, [pc, #32]	; (80008c4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 80008a4:	680a      	ldr	r2, [r1, #0]
 80008a6:	f022 0207 	bic.w	r2, r2, #7
 80008aa:	431a      	orrs	r2, r3
 80008ac:	600a      	str	r2, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80008ae:	6808      	ldr	r0, [r1, #0]
 80008b0:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 80008b4:	1ac0      	subs	r0, r0, r3
 80008b6:	bf18      	it	ne
 80008b8:	2001      	movne	r0, #1
 80008ba:	b003      	add	sp, #12
 80008bc:	bd30      	pop	{r4, r5, pc}
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40022000 	.word	0x40022000

080008c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80008c8:	b570      	push	{r4, r5, r6, lr}
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80008ca:	4c4a      	ldr	r4, [pc, #296]	; (80009f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80008cc:	68a3      	ldr	r3, [r4, #8]
 80008ce:	f013 0f0c 	tst.w	r3, #12
 80008d2:	d009      	beq.n	80008e8 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80008d4:	68a3      	ldr	r3, [r4, #8]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
  uint32_t sysclockfreq = 0U;

  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80008d6:	f003 030c 	and.w	r3, r3, #12
 80008da:	2b0c      	cmp	r3, #12
 80008dc:	d126      	bne.n	800092c <HAL_RCC_GetSysClockFreq+0x64>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80008de:	68e3      	ldr	r3, [r4, #12]
 80008e0:	f003 0303 	and.w	r3, r3, #3
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d121      	bne.n	800092c <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80008e8:	6822      	ldr	r2, [r4, #0]
 80008ea:	4b42      	ldr	r3, [pc, #264]	; (80009f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80008ec:	0712      	lsls	r2, r2, #28
 80008ee:	d40a      	bmi.n	8000906 <HAL_RCC_GetSysClockFreq+0x3e>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> POSITION_VAL(RCC_CSR_MSISRANGE);
 80008f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008f4:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 80008f8:	fa92 f2a2 	rbit	r2, r2
 80008fc:	fab2 f282 	clz	r2, r2
 8000900:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000904:	e007      	b.n	8000916 <HAL_RCC_GetSysClockFreq+0x4e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->CR & RCC_CR_MSIRANGE) >> POSITION_VAL(RCC_CR_MSIRANGE);
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	22f0      	movs	r2, #240	; 0xf0
 800090a:	fa92 f2a2 	rbit	r2, r2
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000916:	40d3      	lsrs	r3, r2
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8000918:	4a37      	ldr	r2, [pc, #220]	; (80009f8 <HAL_RCC_GetSysClockFreq+0x130>)
 800091a:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]

    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 800091e:	68a3      	ldr	r3, [r4, #8]
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8000920:	f013 0f0c 	tst.w	r3, #12
 8000924:	bf0c      	ite	eq
 8000926:	4630      	moveq	r0, r6
 8000928:	2000      	movne	r0, #0
 800092a:	e011      	b.n	8000950 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800092c:	68a3      	ldr	r3, [r4, #8]
 800092e:	f003 030c 	and.w	r3, r3, #12
 8000932:	2b04      	cmp	r3, #4
 8000934:	d007      	beq.n	8000946 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8000936:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	f003 030c 	and.w	r3, r3, #12
 800093e:	2b08      	cmp	r3, #8
 8000940:	d104      	bne.n	800094c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000942:	482e      	ldr	r0, [pc, #184]	; (80009fc <HAL_RCC_GetSysClockFreq+0x134>)
 8000944:	e000      	b.n	8000948 <HAL_RCC_GetSysClockFreq+0x80>
    }
  }
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8000946:	482e      	ldr	r0, [pc, #184]	; (8000a00 <HAL_RCC_GetSysClockFreq+0x138>)
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8000948:	2600      	movs	r6, #0
 800094a:	e001      	b.n	8000950 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 800094c:	2000      	movs	r0, #0
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800094e:	4606      	mov	r6, r0
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8000950:	68a3      	ldr	r3, [r4, #8]
 8000952:	4a28      	ldr	r2, [pc, #160]	; (80009f4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8000954:	f003 030c 	and.w	r3, r3, #12
 8000958:	2b0c      	cmp	r3, #12
 800095a:	d149      	bne.n	80009f0 <HAL_RCC_GetSysClockFreq+0x128>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800095c:	68d1      	ldr	r1, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 800095e:	68d3      	ldr	r3, [r2, #12]
 8000960:	2070      	movs	r0, #112	; 0x70
 8000962:	fa90 f0a0 	rbit	r0, r0
 8000966:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800096a:	fab0 f080 	clz	r0, r0
 800096e:	fa23 f000 	lsr.w	r0, r3, r0

    switch (pllsource)
 8000972:	f001 0303 	and.w	r3, r1, #3
 8000976:	2b02      	cmp	r3, #2

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;
 8000978:	f100 0501 	add.w	r5, r0, #1
 800097c:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00

    switch (pllsource)
 8000980:	d00c      	beq.n	800099c <HAL_RCC_GetSysClockFreq+0xd4>
 8000982:	2b03      	cmp	r3, #3
 8000984:	d119      	bne.n	80009ba <HAL_RCC_GetSysClockFreq+0xf2>
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 8000986:	68d3      	ldr	r3, [r2, #12]
 8000988:	fa91 f1a1 	rbit	r1, r1
 800098c:	fab1 f181 	clz	r1, r1
 8000990:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000994:	fa23 f101 	lsr.w	r1, r3, r1
 8000998:	4a18      	ldr	r2, [pc, #96]	; (80009fc <HAL_RCC_GetSysClockFreq+0x134>)
 800099a:	e009      	b.n	80009b0 <HAL_RCC_GetSysClockFreq+0xe8>
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U ;

    switch (pllsource)
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 800099c:	68d3      	ldr	r3, [r2, #12]
 800099e:	fa91 f1a1 	rbit	r1, r1
 80009a2:	4a17      	ldr	r2, [pc, #92]	; (8000a00 <HAL_RCC_GetSysClockFreq+0x138>)
 80009a4:	fab1 f181 	clz	r1, r1
 80009a8:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80009ac:	fa23 f101 	lsr.w	r1, r3, r1
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80009b0:	fbb2 f0f5 	udiv	r0, r2, r5
 80009b4:	fb00 f301 	mul.w	r3, r0, r1
      break;
 80009b8:	e00b      	b.n	80009d2 <HAL_RCC_GetSysClockFreq+0x10a>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN));
 80009ba:	68d2      	ldr	r2, [r2, #12]
 80009bc:	fa91 f1a1 	rbit	r1, r1
 80009c0:	fab1 f181 	clz	r1, r1
 80009c4:	f402 42fe 	and.w	r2, r2, #32512	; 0x7f00
 80009c8:	40ca      	lsrs	r2, r1
 80009ca:	fbb6 f0f5 	udiv	r0, r6, r5
 80009ce:	fb00 f302 	mul.w	r3, r0, r2
      break;
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR)) + 1U ) * 2U;
 80009d2:	68e2      	ldr	r2, [r4, #12]
 80009d4:	f04f 60c0 	mov.w	r0, #100663296	; 0x6000000
 80009d8:	fa90 f0a0 	rbit	r0, r0
 80009dc:	fab0 f080 	clz	r0, r0
    sysclockfreq = pllvco/pllr;
 80009e0:	f002 62c0 	and.w	r2, r2, #100663296	; 0x6000000
 80009e4:	fa22 f000 	lsr.w	r0, r2, r0
 80009e8:	3001      	adds	r0, #1
 80009ea:	0040      	lsls	r0, r0, #1
 80009ec:	fbb3 f0f0 	udiv	r0, r3, r0
  }

  return sysclockfreq;
}
 80009f0:	bd70      	pop	{r4, r5, r6, pc}
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000
 80009f8:	08002640 	.word	0x08002640
 80009fc:	007a1200 	.word	0x007a1200
 8000a00:	00f42400 	.word	0x00f42400

08000a04 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a04:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a06:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a0a:	06dd      	lsls	r5, r3, #27
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a0c:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a0e:	f140 808f 	bpl.w	8000b30 <HAL_RCC_OscConfig+0x12c>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8000a12:	4d9e      	ldr	r5, [pc, #632]	; (8000c8c <HAL_RCC_OscConfig+0x288>)
 8000a14:	68ab      	ldr	r3, [r5, #8]
 8000a16:	f013 0f0c 	tst.w	r3, #12
 8000a1a:	d153      	bne.n	8000ac4 <HAL_RCC_OscConfig+0xc0>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000a1c:	682b      	ldr	r3, [r5, #0]
 8000a1e:	0798      	lsls	r0, r3, #30
 8000a20:	d503      	bpl.n	8000a2a <HAL_RCC_OscConfig+0x26>
 8000a22:	69a3      	ldr	r3, [r4, #24]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	f000 8256 	beq.w	8000ed6 <HAL_RCC_OscConfig+0x4d2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000a2a:	682a      	ldr	r2, [r5, #0]
 8000a2c:	4b97      	ldr	r3, [pc, #604]	; (8000c8c <HAL_RCC_OscConfig+0x288>)
 8000a2e:	6a20      	ldr	r0, [r4, #32]
 8000a30:	0711      	lsls	r1, r2, #28
 8000a32:	bf56      	itet	pl
 8000a34:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8000a38:	681b      	ldrmi	r3, [r3, #0]
 8000a3a:	091b      	lsrpl	r3, r3, #4
 8000a3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a40:	4283      	cmp	r3, r0
 8000a42:	d216      	bcs.n	8000a72 <HAL_RCC_OscConfig+0x6e>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a44:	f7ff fefe 	bl	8000844 <RCC_SetFlashLatencyFromMSIRange>
 8000a48:	2800      	cmp	r0, #0
 8000a4a:	f040 8244 	bne.w	8000ed6 <HAL_RCC_OscConfig+0x4d2>
          {
            return HAL_ERROR;
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a4e:	682b      	ldr	r3, [r5, #0]
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	602b      	str	r3, [r5, #0]
 8000a56:	682b      	ldr	r3, [r5, #0]
 8000a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a5c:	6a23      	ldr	r3, [r4, #32]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	602b      	str	r3, [r5, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a62:	686b      	ldr	r3, [r5, #4]
 8000a64:	69e2      	ldr	r2, [r4, #28]
 8000a66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a6e:	606b      	str	r3, [r5, #4]
 8000a70:	e014      	b.n	8000a9c <HAL_RCC_OscConfig+0x98>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a72:	682b      	ldr	r3, [r5, #0]
 8000a74:	f043 0308 	orr.w	r3, r3, #8
 8000a78:	602b      	str	r3, [r5, #0]
 8000a7a:	682b      	ldr	r3, [r5, #0]
 8000a7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a80:	4303      	orrs	r3, r0
 8000a82:	602b      	str	r3, [r5, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a84:	686b      	ldr	r3, [r5, #4]
 8000a86:	69e2      	ldr	r2, [r4, #28]
 8000a88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000a8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000a90:	606b      	str	r3, [r5, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a92:	f7ff fed7 	bl	8000844 <RCC_SetFlashLatencyFromMSIRange>
 8000a96:	2800      	cmp	r0, #0
 8000a98:	f040 821d 	bne.w	8000ed6 <HAL_RCC_OscConfig+0x4d2>
            return HAL_ERROR;
          }          
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000a9c:	f7ff ff14 	bl	80008c8 <HAL_RCC_GetSysClockFreq>
 8000aa0:	68ab      	ldr	r3, [r5, #8]
 8000aa2:	22f0      	movs	r2, #240	; 0xf0
 8000aa4:	fa92 f2a2 	rbit	r2, r2
 8000aa8:	fab2 f282 	clz	r2, r2
 8000aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ab0:	40d3      	lsrs	r3, r2
 8000ab2:	4a77      	ldr	r2, [pc, #476]	; (8000c90 <HAL_RCC_OscConfig+0x28c>)
 8000ab4:	5cd3      	ldrb	r3, [r2, r3]
 8000ab6:	40d8      	lsrs	r0, r3
 8000ab8:	4b76      	ldr	r3, [pc, #472]	; (8000c94 <HAL_RCC_OscConfig+0x290>)
 8000aba:	6018      	str	r0, [r3, #0]
        
        /* Configure the source of time base considering new system clocks settings*/
        HAL_InitTick (TICK_INT_PRIORITY);
 8000abc:	2000      	movs	r0, #0
 8000abe:	f7ff fd11 	bl	80004e4 <HAL_InitTick>
 8000ac2:	e035      	b.n	8000b30 <HAL_RCC_OscConfig+0x12c>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ac4:	6983      	ldr	r3, [r0, #24]
 8000ac6:	b31b      	cbz	r3, 8000b10 <HAL_RCC_OscConfig+0x10c>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ac8:	682b      	ldr	r3, [r5, #0]
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	602b      	str	r3, [r5, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ad0:	f7ff fd30 	bl	8000534 <HAL_GetTick>
 8000ad4:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000ad6:	682a      	ldr	r2, [r5, #0]
 8000ad8:	4b6c      	ldr	r3, [pc, #432]	; (8000c8c <HAL_RCC_OscConfig+0x288>)
 8000ada:	0792      	lsls	r2, r2, #30
 8000adc:	d406      	bmi.n	8000aec <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ade:	f7ff fd29 	bl	8000534 <HAL_GetTick>
 8000ae2:	1b80      	subs	r0, r0, r6
 8000ae4:	2802      	cmp	r0, #2
 8000ae6:	d9f6      	bls.n	8000ad6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ae8:	2003      	movs	r0, #3
 8000aea:	e1f5      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4d4>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000aec:	681a      	ldr	r2, [r3, #0]
 8000aee:	f042 0208 	orr.w	r2, r2, #8
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	f022 01f0 	bic.w	r1, r2, #240	; 0xf0
 8000afa:	6a22      	ldr	r2, [r4, #32]
 8000afc:	430a      	orrs	r2, r1
 8000afe:	601a      	str	r2, [r3, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b00:	685a      	ldr	r2, [r3, #4]
 8000b02:	69e1      	ldr	r1, [r4, #28]
 8000b04:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000b08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	e00f      	b.n	8000b30 <HAL_RCC_OscConfig+0x12c>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000b10:	682b      	ldr	r3, [r5, #0]
 8000b12:	f023 0301 	bic.w	r3, r3, #1
 8000b16:	602b      	str	r3, [r5, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000b18:	f7ff fd0c 	bl	8000534 <HAL_GetTick>
 8000b1c:	4606      	mov	r6, r0

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8000b1e:	682b      	ldr	r3, [r5, #0]
 8000b20:	079f      	lsls	r7, r3, #30
 8000b22:	d505      	bpl.n	8000b30 <HAL_RCC_OscConfig+0x12c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b24:	f7ff fd06 	bl	8000534 <HAL_GetTick>
 8000b28:	1b80      	subs	r0, r0, r6
 8000b2a:	2802      	cmp	r0, #2
 8000b2c:	d9f7      	bls.n	8000b1e <HAL_RCC_OscConfig+0x11a>
 8000b2e:	e7db      	b.n	8000ae8 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b30:	6823      	ldr	r3, [r4, #0]
 8000b32:	07de      	lsls	r6, r3, #31
 8000b34:	d403      	bmi.n	8000b3e <HAL_RCC_OscConfig+0x13a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b36:	6823      	ldr	r3, [r4, #0]
 8000b38:	079d      	lsls	r5, r3, #30
 8000b3a:	d448      	bmi.n	8000bce <HAL_RCC_OscConfig+0x1ca>
 8000b3c:	e09f      	b.n	8000c7e <HAL_RCC_OscConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8000b3e:	4d53      	ldr	r5, [pc, #332]	; (8000c8c <HAL_RCC_OscConfig+0x288>)
 8000b40:	68ab      	ldr	r3, [r5, #8]
 8000b42:	f003 030c 	and.w	r3, r3, #12
 8000b46:	2b08      	cmp	r3, #8
 8000b48:	d009      	beq.n	8000b5e <HAL_RCC_OscConfig+0x15a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b4a:	68ab      	ldr	r3, [r5, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || 
 8000b4c:	f003 030c 	and.w	r3, r3, #12
 8000b50:	2b0c      	cmp	r3, #12
 8000b52:	d10b      	bne.n	8000b6c <HAL_RCC_OscConfig+0x168>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000b54:	68eb      	ldr	r3, [r5, #12]
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	d106      	bne.n	8000b6c <HAL_RCC_OscConfig+0x168>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b5e:	682b      	ldr	r3, [r5, #0]
 8000b60:	0398      	lsls	r0, r3, #14
 8000b62:	d5e8      	bpl.n	8000b36 <HAL_RCC_OscConfig+0x132>
 8000b64:	6863      	ldr	r3, [r4, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d1e5      	bne.n	8000b36 <HAL_RCC_OscConfig+0x132>
 8000b6a:	e1b4      	b.n	8000ed6 <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b6c:	6863      	ldr	r3, [r4, #4]
 8000b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b72:	d006      	beq.n	8000b82 <HAL_RCC_OscConfig+0x17e>
 8000b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b78:	d108      	bne.n	8000b8c <HAL_RCC_OscConfig+0x188>
 8000b7a:	682b      	ldr	r3, [r5, #0]
 8000b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b80:	602b      	str	r3, [r5, #0]
 8000b82:	682b      	ldr	r3, [r5, #0]
 8000b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b88:	602b      	str	r3, [r5, #0]
 8000b8a:	e008      	b.n	8000b9e <HAL_RCC_OscConfig+0x19a>
 8000b8c:	682a      	ldr	r2, [r5, #0]
 8000b8e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b92:	602a      	str	r2, [r5, #0]
 8000b94:	682a      	ldr	r2, [r5, #0]
 8000b96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b9a:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b9c:	b15b      	cbz	r3, 8000bb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b9e:	f7ff fcc9 	bl	8000534 <HAL_GetTick>
 8000ba2:	4606      	mov	r6, r0

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000ba4:	682b      	ldr	r3, [r5, #0]
 8000ba6:	0399      	lsls	r1, r3, #14
 8000ba8:	d4c5      	bmi.n	8000b36 <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000baa:	f7ff fcc3 	bl	8000534 <HAL_GetTick>
 8000bae:	1b80      	subs	r0, r0, r6
 8000bb0:	2864      	cmp	r0, #100	; 0x64
 8000bb2:	d9f7      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x1a0>
 8000bb4:	e798      	b.n	8000ae8 <HAL_RCC_OscConfig+0xe4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000bb6:	f7ff fcbd 	bl	8000534 <HAL_GetTick>
 8000bba:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8000bbc:	682b      	ldr	r3, [r5, #0]
 8000bbe:	039a      	lsls	r2, r3, #14
 8000bc0:	d5b9      	bpl.n	8000b36 <HAL_RCC_OscConfig+0x132>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000bc2:	f7ff fcb7 	bl	8000534 <HAL_GetTick>
 8000bc6:	1b80      	subs	r0, r0, r6
 8000bc8:	2864      	cmp	r0, #100	; 0x64
 8000bca:	d9f7      	bls.n	8000bbc <HAL_RCC_OscConfig+0x1b8>
 8000bcc:	e78c      	b.n	8000ae8 <HAL_RCC_OscConfig+0xe4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000bce:	4d2f      	ldr	r5, [pc, #188]	; (8000c8c <HAL_RCC_OscConfig+0x288>)
 8000bd0:	68ab      	ldr	r3, [r5, #8]
 8000bd2:	f003 030c 	and.w	r3, r3, #12
 8000bd6:	2b04      	cmp	r3, #4
 8000bd8:	d009      	beq.n	8000bee <HAL_RCC_OscConfig+0x1ea>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bda:	68ab      	ldr	r3, [r5, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8000bdc:	f003 030c 	and.w	r3, r3, #12
 8000be0:	2b0c      	cmp	r3, #12
 8000be2:	d11a      	bne.n	8000c1a <HAL_RCC_OscConfig+0x216>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000be4:	68eb      	ldr	r3, [r5, #12]
 8000be6:	f003 0303 	and.w	r3, r3, #3
 8000bea:	2b02      	cmp	r3, #2
 8000bec:	d115      	bne.n	8000c1a <HAL_RCC_OscConfig+0x216>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000bee:	682b      	ldr	r3, [r5, #0]
 8000bf0:	055b      	lsls	r3, r3, #21
 8000bf2:	d503      	bpl.n	8000bfc <HAL_RCC_OscConfig+0x1f8>
 8000bf4:	68e3      	ldr	r3, [r4, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 816d 	beq.w	8000ed6 <HAL_RCC_OscConfig+0x4d2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bfc:	686b      	ldr	r3, [r5, #4]
 8000bfe:	f04f 52f8 	mov.w	r2, #520093696	; 0x1f000000
 8000c02:	fa92 f2a2 	rbit	r2, r2
 8000c06:	6921      	ldr	r1, [r4, #16]
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c10:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000c14:	4313      	orrs	r3, r2
 8000c16:	606b      	str	r3, [r5, #4]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c18:	e031      	b.n	8000c7e <HAL_RCC_OscConfig+0x27a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c1a:	68e3      	ldr	r3, [r4, #12]
 8000c1c:	b1fb      	cbz	r3, 8000c5e <HAL_RCC_OscConfig+0x25a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c1e:	682b      	ldr	r3, [r5, #0]
 8000c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c24:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c26:	f7ff fc85 	bl	8000534 <HAL_GetTick>
 8000c2a:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000c2c:	682b      	ldr	r3, [r5, #0]
 8000c2e:	4817      	ldr	r0, [pc, #92]	; (8000c8c <HAL_RCC_OscConfig+0x288>)
 8000c30:	055f      	lsls	r7, r3, #21
 8000c32:	d405      	bmi.n	8000c40 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c34:	f7ff fc7e 	bl	8000534 <HAL_GetTick>
 8000c38:	1b80      	subs	r0, r0, r6
 8000c3a:	2802      	cmp	r0, #2
 8000c3c:	d9f6      	bls.n	8000c2c <HAL_RCC_OscConfig+0x228>
 8000c3e:	e753      	b.n	8000ae8 <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c40:	6843      	ldr	r3, [r0, #4]
 8000c42:	f04f 52f8 	mov.w	r2, #520093696	; 0x1f000000
 8000c46:	fa92 f2a2 	rbit	r2, r2
 8000c4a:	6921      	ldr	r1, [r4, #16]
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	fa01 f202 	lsl.w	r2, r1, r2
 8000c54:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	6043      	str	r3, [r0, #4]
 8000c5c:	e00f      	b.n	8000c7e <HAL_RCC_OscConfig+0x27a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c5e:	682b      	ldr	r3, [r5, #0]
 8000c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c64:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c66:	f7ff fc65 	bl	8000534 <HAL_GetTick>
 8000c6a:	4606      	mov	r6, r0

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8000c6c:	682b      	ldr	r3, [r5, #0]
 8000c6e:	0558      	lsls	r0, r3, #21
 8000c70:	d505      	bpl.n	8000c7e <HAL_RCC_OscConfig+0x27a>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c72:	f7ff fc5f 	bl	8000534 <HAL_GetTick>
 8000c76:	1b80      	subs	r0, r0, r6
 8000c78:	2802      	cmp	r0, #2
 8000c7a:	d9f7      	bls.n	8000c6c <HAL_RCC_OscConfig+0x268>
 8000c7c:	e734      	b.n	8000ae8 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c7e:	6823      	ldr	r3, [r4, #0]
 8000c80:	0719      	lsls	r1, r3, #28
 8000c82:	d409      	bmi.n	8000c98 <HAL_RCC_OscConfig+0x294>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c84:	6823      	ldr	r3, [r4, #0]
 8000c86:	075a      	lsls	r2, r3, #29
 8000c88:	d42f      	bmi.n	8000cea <HAL_RCC_OscConfig+0x2e6>
 8000c8a:	e097      	b.n	8000dbc <HAL_RCC_OscConfig+0x3b8>
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	08002625 	.word	0x08002625
 8000c94:	20000000 	.word	0x20000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c98:	6963      	ldr	r3, [r4, #20]
 8000c9a:	4d91      	ldr	r5, [pc, #580]	; (8000ee0 <HAL_RCC_OscConfig+0x4dc>)
 8000c9c:	b193      	cbz	r3, 8000cc4 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c9e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000caa:	f7ff fc43 	bl	8000534 <HAL_GetTick>
 8000cae:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8000cb0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000cb4:	079b      	lsls	r3, r3, #30
 8000cb6:	d4e5      	bmi.n	8000c84 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cb8:	f7ff fc3c 	bl	8000534 <HAL_GetTick>
 8000cbc:	1b80      	subs	r0, r0, r6
 8000cbe:	2802      	cmp	r0, #2
 8000cc0:	d9f6      	bls.n	8000cb0 <HAL_RCC_OscConfig+0x2ac>
 8000cc2:	e711      	b.n	8000ae8 <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cc4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000cc8:	f023 0301 	bic.w	r3, r3, #1
 8000ccc:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cd0:	f7ff fc30 	bl	8000534 <HAL_GetTick>
 8000cd4:	4606      	mov	r6, r0

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8000cd6:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8000cda:	079f      	lsls	r7, r3, #30
 8000cdc:	d5d2      	bpl.n	8000c84 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cde:	f7ff fc29 	bl	8000534 <HAL_GetTick>
 8000ce2:	1b80      	subs	r0, r0, r6
 8000ce4:	2802      	cmp	r0, #2
 8000ce6:	d9f6      	bls.n	8000cd6 <HAL_RCC_OscConfig+0x2d2>
 8000ce8:	e6fe      	b.n	8000ae8 <HAL_RCC_OscConfig+0xe4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000cea:	4d7d      	ldr	r5, [pc, #500]	; (8000ee0 <HAL_RCC_OscConfig+0x4dc>)
 8000cec:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000cee:	00d8      	lsls	r0, r3, #3
 8000cf0:	d40a      	bmi.n	8000d08 <HAL_RCC_OscConfig+0x304>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	65ab      	str	r3, [r5, #88]	; 0x58
 8000cfa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000cfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d04:	2701      	movs	r7, #1
 8000d06:	e000      	b.n	8000d0a <HAL_RCC_OscConfig+0x306>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d08:	2700      	movs	r7, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d0a:	4e76      	ldr	r6, [pc, #472]	; (8000ee4 <HAL_RCC_OscConfig+0x4e0>)
 8000d0c:	6833      	ldr	r3, [r6, #0]
 8000d0e:	05d9      	lsls	r1, r3, #23
 8000d10:	d503      	bpl.n	8000d1a <HAL_RCC_OscConfig+0x316>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d12:	68a3      	ldr	r3, [r4, #8]
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d111      	bne.n	8000d3c <HAL_RCC_OscConfig+0x338>
 8000d18:	e018      	b.n	8000d4c <HAL_RCC_OscConfig+0x348>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d1a:	6833      	ldr	r3, [r6, #0]
 8000d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d20:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d22:	f7ff fc07 	bl	8000534 <HAL_GetTick>
 8000d26:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d28:	6833      	ldr	r3, [r6, #0]
 8000d2a:	05da      	lsls	r2, r3, #23
 8000d2c:	d4f1      	bmi.n	8000d12 <HAL_RCC_OscConfig+0x30e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d2e:	f7ff fc01 	bl	8000534 <HAL_GetTick>
 8000d32:	ebc8 0000 	rsb	r0, r8, r0
 8000d36:	2802      	cmp	r0, #2
 8000d38:	d9f6      	bls.n	8000d28 <HAL_RCC_OscConfig+0x324>
 8000d3a:	e6d5      	b.n	8000ae8 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d3c:	2b05      	cmp	r3, #5
 8000d3e:	d10c      	bne.n	8000d5a <HAL_RCC_OscConfig+0x356>
 8000d40:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8000d4c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
 8000d58:	e00c      	b.n	8000d74 <HAL_RCC_OscConfig+0x370>
 8000d5a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8000d5e:	f022 0201 	bic.w	r2, r2, #1
 8000d62:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 8000d66:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8000d6a:	f022 0204 	bic.w	r2, r2, #4
 8000d6e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d72:	b173      	cbz	r3, 8000d92 <HAL_RCC_OscConfig+0x38e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d74:	f7ff fbde 	bl	8000534 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d78:	f241 3888 	movw	r8, #5000	; 0x1388

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d7c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8000d7e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000d82:	079b      	lsls	r3, r3, #30
 8000d84:	d40e      	bmi.n	8000da4 <HAL_RCC_OscConfig+0x3a0>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d86:	f7ff fbd5 	bl	8000534 <HAL_GetTick>
 8000d8a:	1b80      	subs	r0, r0, r6
 8000d8c:	4540      	cmp	r0, r8
 8000d8e:	d9f6      	bls.n	8000d7e <HAL_RCC_OscConfig+0x37a>
 8000d90:	e6aa      	b.n	8000ae8 <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d92:	f7ff fbcf 	bl	8000534 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d96:	f241 3888 	movw	r8, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d9a:	4606      	mov	r6, r0

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8000d9c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8000da0:	0798      	lsls	r0, r3, #30
 8000da2:	d405      	bmi.n	8000db0 <HAL_RCC_OscConfig+0x3ac>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000da4:	b157      	cbz	r7, 8000dbc <HAL_RCC_OscConfig+0x3b8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000da6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000da8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dac:	65ab      	str	r3, [r5, #88]	; 0x58
 8000dae:	e005      	b.n	8000dbc <HAL_RCC_OscConfig+0x3b8>
      tickstart = HAL_GetTick();

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000db0:	f7ff fbc0 	bl	8000534 <HAL_GetTick>
 8000db4:	1b80      	subs	r0, r0, r6
 8000db6:	4540      	cmp	r0, r8
 8000db8:	d9f0      	bls.n	8000d9c <HAL_RCC_OscConfig+0x398>
 8000dba:	e695      	b.n	8000ae8 <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	0699      	lsls	r1, r3, #26
 8000dc0:	d402      	bmi.n	8000dc8 <HAL_RCC_OscConfig+0x3c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000dc2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000dc4:	bb4a      	cbnz	r2, 8000e1a <HAL_RCC_OscConfig+0x416>
 8000dc6:	e05f      	b.n	8000e88 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8000dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000dca:	4d45      	ldr	r5, [pc, #276]	; (8000ee0 <HAL_RCC_OscConfig+0x4dc>)
 8000dcc:	b193      	cbz	r3, 8000df4 <HAL_RCC_OscConfig+0x3f0>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8000dce:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000dda:	f7ff fbab 	bl	8000534 <HAL_GetTick>
 8000dde:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 8000de0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000de4:	079a      	lsls	r2, r3, #30
 8000de6:	d4ec      	bmi.n	8000dc2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000de8:	f7ff fba4 	bl	8000534 <HAL_GetTick>
 8000dec:	1b80      	subs	r0, r0, r6
 8000dee:	2802      	cmp	r0, #2
 8000df0:	d9f6      	bls.n	8000de0 <HAL_RCC_OscConfig+0x3dc>
 8000df2:	e679      	b.n	8000ae8 <HAL_RCC_OscConfig+0xe4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8000df4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000df8:	f023 0301 	bic.w	r3, r3, #1
 8000dfc:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e00:	f7ff fb98 	bl	8000534 <HAL_GetTick>
 8000e04:	4606      	mov	r6, r0

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8000e06:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8000e0a:	079b      	lsls	r3, r3, #30
 8000e0c:	d5d9      	bpl.n	8000dc2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8000e0e:	f7ff fb91 	bl	8000534 <HAL_GetTick>
 8000e12:	1b80      	subs	r0, r0, r6
 8000e14:	2802      	cmp	r0, #2
 8000e16:	d9f6      	bls.n	8000e06 <HAL_RCC_OscConfig+0x402>
 8000e18:	e666      	b.n	8000ae8 <HAL_RCC_OscConfig+0xe4>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e1a:	4d31      	ldr	r5, [pc, #196]	; (8000ee0 <HAL_RCC_OscConfig+0x4dc>)
 8000e1c:	68ab      	ldr	r3, [r5, #8]
 8000e1e:	f003 030c 	and.w	r3, r3, #12
 8000e22:	2b0c      	cmp	r3, #12
 8000e24:	d057      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x4d2>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e26:	682b      	ldr	r3, [r5, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000e28:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e2e:	602b      	str	r3, [r5, #0]
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000e30:	d138      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x4a0>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e32:	f7ff fb7f 	bl	8000534 <HAL_GetTick>
 8000e36:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000e38:	682b      	ldr	r3, [r5, #0]
 8000e3a:	4829      	ldr	r0, [pc, #164]	; (8000ee0 <HAL_RCC_OscConfig+0x4dc>)
 8000e3c:	019f      	lsls	r7, r3, #6
 8000e3e:	d425      	bmi.n	8000e8c <HAL_RCC_OscConfig+0x488>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e40:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8000e42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000e44:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000e46:	06f6      	lsls	r6, r6, #27
 8000e48:	ea46 2103 	orr.w	r1, r6, r3, lsl #8
 8000e4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e4e:	3a01      	subs	r2, #1
 8000e50:	430b      	orrs	r3, r1
 8000e52:	ea43 1102 	orr.w	r1, r3, r2, lsl #4
 8000e56:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e58:	085b      	lsrs	r3, r3, #1
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	ea41 5243 	orr.w	r2, r1, r3, lsl #21
 8000e60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e62:	085b      	lsrs	r3, r3, #1
 8000e64:	3b01      	subs	r3, #1
 8000e66:	ea42 6343 	orr.w	r3, r2, r3, lsl #25
 8000e6a:	60c3      	str	r3, [r0, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e6c:	6803      	ldr	r3, [r0, #0]
 8000e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e72:	6003      	str	r3, [r0, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000e74:	68c3      	ldr	r3, [r0, #12]
 8000e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e7a:	60c3      	str	r3, [r0, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fb5a 	bl	8000534 <HAL_GetTick>
 8000e80:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000e82:	682b      	ldr	r3, [r5, #0]
 8000e84:	0199      	lsls	r1, r3, #6
 8000e86:	d507      	bpl.n	8000e98 <HAL_RCC_OscConfig+0x494>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000e88:	2000      	movs	r0, #0
 8000e8a:	e025      	b.n	8000ed8 <HAL_RCC_OscConfig+0x4d4>
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e8c:	f7ff fb52 	bl	8000534 <HAL_GetTick>
 8000e90:	1b80      	subs	r0, r0, r6
 8000e92:	2802      	cmp	r0, #2
 8000e94:	d9d0      	bls.n	8000e38 <HAL_RCC_OscConfig+0x434>
 8000e96:	e627      	b.n	8000ae8 <HAL_RCC_OscConfig+0xe4>
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e98:	f7ff fb4c 	bl	8000534 <HAL_GetTick>
 8000e9c:	1b00      	subs	r0, r0, r4
 8000e9e:	2802      	cmp	r0, #2
 8000ea0:	d9ef      	bls.n	8000e82 <HAL_RCC_OscConfig+0x47e>
 8000ea2:	e621      	b.n	8000ae8 <HAL_RCC_OscConfig+0xe4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8000ea4:	682b      	ldr	r3, [r5, #0]
 8000ea6:	011a      	lsls	r2, r3, #4
           && 
           (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == RESET)
#endif /* RCC_PLLSAI2_SUPPORT */
          )
        {  
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8000ea8:	bf5e      	ittt	pl
 8000eaa:	68eb      	ldrpl	r3, [r5, #12]
 8000eac:	f023 0303 	bicpl.w	r3, r3, #3
 8000eb0:	60eb      	strpl	r3, [r5, #12]
        }
        
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8000eb2:	68eb      	ldr	r3, [r5, #12]
 8000eb4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8000eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ebc:	60eb      	str	r3, [r5, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ebe:	f7ff fb39 	bl	8000534 <HAL_GetTick>
 8000ec2:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8000ec4:	682b      	ldr	r3, [r5, #0]
 8000ec6:	019b      	lsls	r3, r3, #6
 8000ec8:	d5de      	bpl.n	8000e88 <HAL_RCC_OscConfig+0x484>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000eca:	f7ff fb33 	bl	8000534 <HAL_GetTick>
 8000ece:	1b00      	subs	r0, r0, r4
 8000ed0:	2802      	cmp	r0, #2
 8000ed2:	d9f7      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x4c0>
 8000ed4:	e608      	b.n	8000ae8 <HAL_RCC_OscConfig+0xe4>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8000ed6:	2001      	movs	r0, #1
    }
  }
  return HAL_OK;
}
 8000ed8:	b002      	add	sp, #8
 8000eda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ede:	bf00      	nop
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40007000 	.word	0x40007000

08000ee8 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ee8:	4a57      	ldr	r2, [pc, #348]	; (8001048 <HAL_RCC_ClockConfig+0x160>)
 8000eea:	6813      	ldr	r3, [r2, #0]
 8000eec:	f003 0307 	and.w	r3, r3, #7
 8000ef0:	428b      	cmp	r3, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ef6:	4605      	mov	r5, r0
 8000ef8:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000efa:	d30a      	bcc.n	8000f12 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000efc:	6829      	ldr	r1, [r5, #0]
 8000efe:	0788      	lsls	r0, r1, #30
 8000f00:	d514      	bpl.n	8000f2c <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f02:	4852      	ldr	r0, [pc, #328]	; (800104c <HAL_RCC_ClockConfig+0x164>)
 8000f04:	6883      	ldr	r3, [r0, #8]
 8000f06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f0a:	68ab      	ldr	r3, [r5, #8]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	6083      	str	r3, [r0, #8]
 8000f10:	e00c      	b.n	8000f2c <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f12:	6813      	ldr	r3, [r2, #0]
 8000f14:	f023 0307 	bic.w	r3, r3, #7
 8000f18:	430b      	orrs	r3, r1
 8000f1a:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f1c:	6813      	ldr	r3, [r2, #0]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	4299      	cmp	r1, r3
 8000f24:	d0ea      	beq.n	8000efc <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000f26:	2001      	movs	r0, #1
 8000f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f2c:	07ca      	lsls	r2, r1, #31
 8000f2e:	d406      	bmi.n	8000f3e <HAL_RCC_ClockConfig+0x56>
      }
    }
  }
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f30:	4a45      	ldr	r2, [pc, #276]	; (8001048 <HAL_RCC_ClockConfig+0x160>)
 8000f32:	6813      	ldr	r3, [r2, #0]
 8000f34:	f003 0307 	and.w	r3, r3, #7
 8000f38:	429e      	cmp	r6, r3
 8000f3a:	d351      	bcc.n	8000fe0 <HAL_RCC_ClockConfig+0xf8>
 8000f3c:	e05a      	b.n	8000ff4 <HAL_RCC_ClockConfig+0x10c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f3e:	686b      	ldr	r3, [r5, #4]
 8000f40:	4c42      	ldr	r4, [pc, #264]	; (800104c <HAL_RCC_ClockConfig+0x164>)
 8000f42:	2b02      	cmp	r3, #2
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000f44:	6822      	ldr	r2, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f46:	d102      	bne.n	8000f4e <HAL_RCC_ClockConfig+0x66>
    {
      /* Check the HSE ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8000f48:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000f4c:	e00a      	b.n	8000f64 <HAL_RCC_ClockConfig+0x7c>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d102      	bne.n	8000f58 <HAL_RCC_ClockConfig+0x70>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8000f52:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000f56:	e005      	b.n	8000f64 <HAL_RCC_ClockConfig+0x7c>
      {
        return HAL_ERROR;
      }
    }
    /* MSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000f58:	b913      	cbnz	r3, 8000f60 <HAL_RCC_ClockConfig+0x78>
    {
      /* Check the MSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8000f5a:	f012 0f02 	tst.w	r2, #2
 8000f5e:	e001      	b.n	8000f64 <HAL_RCC_ClockConfig+0x7c>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8000f60:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8000f64:	d0df      	beq.n	8000f26 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8000f66:	68a2      	ldr	r2, [r4, #8]
 8000f68:	f022 0203 	bic.w	r2, r2, #3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	60a3      	str	r3, [r4, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000f70:	f7ff fae0 	bl	8000534 <HAL_GetTick>

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f74:	686b      	ldr	r3, [r5, #4]
 8000f76:	2b02      	cmp	r3, #2
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000f78:	4607      	mov	r7, r0

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f7a:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f7e:	d10c      	bne.n	8000f9a <HAL_RCC_ClockConfig+0xb2>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8000f80:	68a3      	ldr	r3, [r4, #8]
 8000f82:	f003 030c 	and.w	r3, r3, #12
 8000f86:	2b08      	cmp	r3, #8
 8000f88:	d0d2      	beq.n	8000f30 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f8a:	f7ff fad3 	bl	8000534 <HAL_GetTick>
 8000f8e:	1bc0      	subs	r0, r0, r7
 8000f90:	4540      	cmp	r0, r8
 8000f92:	d9f5      	bls.n	8000f80 <HAL_RCC_ClockConfig+0x98>
        {
          return HAL_TIMEOUT;
 8000f94:	2003      	movs	r0, #3
 8000f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f9a:	2b03      	cmp	r3, #3
 8000f9c:	d10a      	bne.n	8000fb4 <HAL_RCC_ClockConfig+0xcc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f9e:	68a3      	ldr	r3, [r4, #8]
 8000fa0:	f003 030c 	and.w	r3, r3, #12
 8000fa4:	2b0c      	cmp	r3, #12
 8000fa6:	d0c3      	beq.n	8000f30 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fa8:	f7ff fac4 	bl	8000534 <HAL_GetTick>
 8000fac:	1bc0      	subs	r0, r0, r7
 8000fae:	4540      	cmp	r0, r8
 8000fb0:	d9f5      	bls.n	8000f9e <HAL_RCC_ClockConfig+0xb6>
 8000fb2:	e7ef      	b.n	8000f94 <HAL_RCC_ClockConfig+0xac>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8000fb4:	b973      	cbnz	r3, 8000fd4 <HAL_RCC_ClockConfig+0xec>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8000fb6:	68a3      	ldr	r3, [r4, #8]
 8000fb8:	f013 0f0c 	tst.w	r3, #12
 8000fbc:	d0b8      	beq.n	8000f30 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fbe:	f7ff fab9 	bl	8000534 <HAL_GetTick>
 8000fc2:	1bc0      	subs	r0, r0, r7
 8000fc4:	4540      	cmp	r0, r8
 8000fc6:	d9f6      	bls.n	8000fb6 <HAL_RCC_ClockConfig+0xce>
 8000fc8:	e7e4      	b.n	8000f94 <HAL_RCC_ClockConfig+0xac>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fca:	f7ff fab3 	bl	8000534 <HAL_GetTick>
 8000fce:	1bc0      	subs	r0, r0, r7
 8000fd0:	4540      	cmp	r0, r8
 8000fd2:	d8df      	bhi.n	8000f94 <HAL_RCC_ClockConfig+0xac>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8000fd4:	68a3      	ldr	r3, [r4, #8]
 8000fd6:	f003 030c 	and.w	r3, r3, #12
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	d1f5      	bne.n	8000fca <HAL_RCC_ClockConfig+0xe2>
 8000fde:	e7a7      	b.n	8000f30 <HAL_RCC_ClockConfig+0x48>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fe0:	6813      	ldr	r3, [r2, #0]
 8000fe2:	f023 0307 	bic.w	r3, r3, #7
 8000fe6:	4333      	orrs	r3, r6
 8000fe8:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000fea:	6813      	ldr	r3, [r2, #0]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	429e      	cmp	r6, r3
 8000ff2:	d198      	bne.n	8000f26 <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }
  
  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ff4:	6829      	ldr	r1, [r5, #0]
 8000ff6:	4c15      	ldr	r4, [pc, #84]	; (800104c <HAL_RCC_ClockConfig+0x164>)
 8000ff8:	f011 0f04 	tst.w	r1, #4
 8000ffc:	d005      	beq.n	800100a <HAL_RCC_ClockConfig+0x122>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ffe:	68a3      	ldr	r3, [r4, #8]
 8001000:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001004:	68eb      	ldr	r3, [r5, #12]
 8001006:	4313      	orrs	r3, r2
 8001008:	60a3      	str	r3, [r4, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800100a:	070b      	lsls	r3, r1, #28
 800100c:	d506      	bpl.n	800101c <HAL_RCC_ClockConfig+0x134>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800100e:	68a3      	ldr	r3, [r4, #8]
 8001010:	692a      	ldr	r2, [r5, #16]
 8001012:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001016:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800101a:	60a3      	str	r3, [r4, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800101c:	f7ff fc54 	bl	80008c8 <HAL_RCC_GetSysClockFreq>
 8001020:	68a3      	ldr	r3, [r4, #8]
 8001022:	22f0      	movs	r2, #240	; 0xf0
 8001024:	fa92 f2a2 	rbit	r2, r2
 8001028:	fab2 f282 	clz	r2, r2
 800102c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001030:	40d3      	lsrs	r3, r2
 8001032:	4a07      	ldr	r2, [pc, #28]	; (8001050 <HAL_RCC_ClockConfig+0x168>)
 8001034:	5cd3      	ldrb	r3, [r2, r3]
 8001036:	40d8      	lsrs	r0, r3
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_RCC_ClockConfig+0x16c>)
 800103a:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff fa51 	bl	80004e4 <HAL_InitTick>

  return HAL_OK;
 8001042:	2000      	movs	r0, #0
}
 8001044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001048:	40022000 	.word	0x40022000
 800104c:	40021000 	.word	0x40021000
 8001050:	08002625 	.word	0x08002625
 8001054:	20000000 	.word	0x20000000

08001058 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001058:	4b01      	ldr	r3, [pc, #4]	; (8001060 <HAL_RCC_GetHCLKFreq+0x8>)
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000000 	.word	0x20000000

08001064 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001064:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001066:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	fa92 f2a2 	rbit	r2, r2
 8001070:	fab2 f282 	clz	r2, r2
 8001074:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001078:	40d3      	lsrs	r3, r2
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <HAL_RCC_GetPCLK1Freq+0x28>)
 800107c:	5cd3      	ldrb	r3, [r2, r3]
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001080:	6810      	ldr	r0, [r2, #0]
}
 8001082:	40d8      	lsrs	r0, r3
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000
 800108c:	08002635 	.word	0x08002635
 8001090:	20000000 	.word	0x20000000

08001094 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001096:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	fa92 f2a2 	rbit	r2, r2
 80010a0:	fab2 f282 	clz	r2, r2
 80010a4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80010a8:	40d3      	lsrs	r3, r2
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80010ac:	5cd3      	ldrb	r3, [r2, r3]
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80010b0:	6810      	ldr	r0, [r2, #0]
}
 80010b2:	40d8      	lsrs	r0, r3
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000
 80010bc:	08002635 	.word	0x08002635
 80010c0:	20000000 	.word	0x20000000

080010c4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80010c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80010c6:	4b5a      	ldr	r3, [pc, #360]	; (8001230 <RCCEx_PLLSAI1_Config+0x16c>)
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	f012 0f03 	tst.w	r2, #3
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80010ce:	4604      	mov	r4, r0
 80010d0:	460e      	mov	r6, r1
 80010d2:	461d      	mov	r5, r3
 80010d4:	6800      	ldr	r0, [r0, #0]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));
  
  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80010d6:	d013      	beq.n	8001100 <RCCEx_PLLSAI1_Config+0x3c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	f002 0203 	and.w	r2, r2, #3
 80010de:	4282      	cmp	r2, r0
 80010e0:	d124      	bne.n	800112c <RCCEx_PLLSAI1_Config+0x68>
       || 
 80010e2:	b31a      	cbz	r2, 800112c <RCCEx_PLLSAI1_Config+0x68>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> POSITION_VAL(RCC_PLLCFGR_PLLM)) + 1U) != PllSai1->PLLSAI1M)
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	2370      	movs	r3, #112	; 0x70
 80010e8:	fa93 f3a3 	rbit	r3, r3
 80010ec:	fab3 f183 	clz	r1, r3
  {
    /* PLL clock source and divider M already set, check that no request for change  */ 
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
       || 
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
       || 
 80010f0:	f002 0370 	and.w	r3, r2, #112	; 0x70
 80010f4:	40cb      	lsrs	r3, r1
 80010f6:	6862      	ldr	r2, [r4, #4]
 80010f8:	3301      	adds	r3, #1
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d116      	bne.n	800112c <RCCEx_PLLSAI1_Config+0x68>
 80010fe:	e025      	b.n	800114c <RCCEx_PLLSAI1_Config+0x88>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001100:	2802      	cmp	r0, #2
 8001102:	d008      	beq.n	8001116 <RCCEx_PLLSAI1_Config+0x52>
 8001104:	2803      	cmp	r0, #3
 8001106:	d00a      	beq.n	800111e <RCCEx_PLLSAI1_Config+0x5a>
 8001108:	2801      	cmp	r0, #1
 800110a:	d10f      	bne.n	800112c <RCCEx_PLLSAI1_Config+0x68>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	079f      	lsls	r7, r3, #30
 8001110:	f140 808d 	bpl.w	800122e <RCCEx_PLLSAI1_Config+0x16a>
 8001114:	e00c      	b.n	8001130 <RCCEx_PLLSAI1_Config+0x6c>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800111c:	e005      	b.n	800112a <RCCEx_PLLSAI1_Config+0x66>
      {
        status = HAL_ERROR;
      }
      break;
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	0391      	lsls	r1, r2, #14
 8001122:	d405      	bmi.n	8001130 <RCCEx_PLLSAI1_Config+0x6c>
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800112a:	d101      	bne.n	8001130 <RCCEx_PLLSAI1_Config+0x6c>
 800112c:	2001      	movs	r0, #1
 800112e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    if(status == HAL_OK)
    {
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLM));
 8001130:	68e9      	ldr	r1, [r5, #12]
 8001132:	2370      	movs	r3, #112	; 0x70
 8001134:	fa93 f3a3 	rbit	r3, r3
 8001138:	fab3 f283 	clz	r2, r3
 800113c:	6863      	ldr	r3, [r4, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	4093      	lsls	r3, r2
 8001142:	f021 0273 	bic.w	r2, r1, #115	; 0x73
 8001146:	4310      	orrs	r0, r2
 8001148:	4318      	orrs	r0, r3
 800114a:	60e8      	str	r0, [r5, #12]
  }
  
  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800114c:	682b      	ldr	r3, [r5, #0]
 800114e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001152:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001154:	f7ff f9ee 	bl	8000534 <HAL_GetTick>
 8001158:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800115a:	682b      	ldr	r3, [r5, #0]
 800115c:	4934      	ldr	r1, [pc, #208]	; (8001230 <RCCEx_PLLSAI1_Config+0x16c>)
 800115e:	011a      	lsls	r2, r3, #4
 8001160:	d506      	bpl.n	8001170 <RCCEx_PLLSAI1_Config+0xac>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001162:	f7ff f9e7 	bl	8000534 <HAL_GetTick>
 8001166:	1bc0      	subs	r0, r0, r7
 8001168:	2802      	cmp	r0, #2
 800116a:	d9f6      	bls.n	800115a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_TIMEOUT;
 800116c:	2003      	movs	r0, #3
 800116e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001170:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
 8001174:	68a7      	ldr	r7, [r4, #8]
      }
    }

    if(status == HAL_OK)    
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001176:	b9b6      	cbnz	r6, 80011a6 <RCCEx_PLLSAI1_Config+0xe2>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 8001178:	6908      	ldr	r0, [r1, #16]
 800117a:	fa93 f2a3 	rbit	r2, r3
 800117e:	f04f 4678 	mov.w	r6, #4160749568	; 0xf8000000
 8001182:	fab2 f282 	clz	r2, r2
 8001186:	fa96 f6a6 	rbit	r6, r6
 800118a:	fa07 f302 	lsl.w	r3, r7, r2
 800118e:	68e2      	ldr	r2, [r4, #12]
 8001190:	fab6 f686 	clz	r6, r6
 8001194:	40b2      	lsls	r2, r6
 8001196:	4313      	orrs	r3, r2
 8001198:	f020 4278 	bic.w	r2, r0, #4160749568	; 0xf8000000
 800119c:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80011a0:	431a      	orrs	r2, r3
 80011a2:	610a      	str	r2, [r1, #16]
 80011a4:	e02d      	b.n	8001202 <RCCEx_PLLSAI1_Config+0x13e>
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80011a6:	2e01      	cmp	r6, #1
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80011a8:	6908      	ldr	r0, [r1, #16]
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1P, 
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   ((PllSai1->PLLSAI1P >> 4U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1P)));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80011aa:	d113      	bne.n	80011d4 <RCCEx_PLLSAI1_Config+0x110>
 80011ac:	fa93 f2a3 	rbit	r2, r3
 80011b0:	f44f 03c0 	mov.w	r3, #6291456	; 0x600000
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80011b4:	fab2 f282 	clz	r2, r2
 80011b8:	fa93 f3a3 	rbit	r3, r3
 80011bc:	6926      	ldr	r6, [r4, #16]
 80011be:	0876      	lsrs	r6, r6, #1
 80011c0:	fab3 f383 	clz	r3, r3
 80011c4:	3e01      	subs	r6, #1
 80011c6:	409e      	lsls	r6, r3
 80011c8:	fa07 f302 	lsl.w	r3, r7, r2
 80011cc:	4333      	orrs	r3, r6
 80011ce:	f420 02c0 	bic.w	r2, r0, #6291456	; 0x600000
 80011d2:	e012      	b.n	80011fa <RCCEx_PLLSAI1_Config+0x136>
 80011d4:	fa93 f2a3 	rbit	r2, r3
 80011d8:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
      }
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR, 
 80011dc:	fab2 f282 	clz	r2, r2
 80011e0:	fa93 f3a3 	rbit	r3, r3
 80011e4:	6966      	ldr	r6, [r4, #20]
 80011e6:	0876      	lsrs	r6, r6, #1
 80011e8:	fab3 f383 	clz	r3, r3
 80011ec:	3e01      	subs	r6, #1
 80011ee:	409e      	lsls	r6, r3
 80011f0:	fa07 f302 	lsl.w	r3, r7, r2
 80011f4:	4333      	orrs	r3, r6
 80011f6:	f020 62c0 	bic.w	r2, r0, #100663296	; 0x6000000
 80011fa:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80011fe:	4313      	orrs	r3, r2
 8001200:	610b      	str	r3, [r1, #16]
                   (PllSai1->PLLSAI1N << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1N)) | 
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << POSITION_VAL(RCC_PLLSAI1CFGR_PLLSAI1R)));
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001202:	682b      	ldr	r3, [r5, #0]
 8001204:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001208:	602b      	str	r3, [r5, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800120a:	f7ff f993 	bl	8000534 <HAL_GetTick>
 800120e:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001210:	682b      	ldr	r3, [r5, #0]
 8001212:	4a07      	ldr	r2, [pc, #28]	; (8001230 <RCCEx_PLLSAI1_Config+0x16c>)
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	d405      	bmi.n	8001224 <RCCEx_PLLSAI1_Config+0x160>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001218:	f7ff f98c 	bl	8000534 <HAL_GetTick>
 800121c:	1b80      	subs	r0, r0, r6
 800121e:	2802      	cmp	r0, #2
 8001220:	d9f6      	bls.n	8001210 <RCCEx_PLLSAI1_Config+0x14c>
 8001222:	e7a3      	b.n	800116c <RCCEx_PLLSAI1_Config+0xa8>
      }

      if(status == HAL_OK)    
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001224:	6911      	ldr	r1, [r2, #16]
 8001226:	69a3      	ldr	r3, [r4, #24]
 8001228:	430b      	orrs	r3, r1
 800122a:	6113      	str	r3, [r2, #16]
 800122c:	2000      	movs	r0, #0
      }
    }
  }
  
  return status;
}
 800122e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001230:	40021000 	.word	0x40021000

08001234 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001238:	6805      	ldr	r5, [r0, #0]
 800123a:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800123e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001240:	d01f      	beq.n	8001282 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001242:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001244:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001248:	d004      	beq.n	8001254 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800124a:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800124e:	d00c      	beq.n	800126a <HAL_RCCEx_PeriphCLKConfig+0x36>
 8001250:	b9b1      	cbnz	r1, 8001280 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8001252:	e005      	b.n	8001260 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001254:	4a96      	ldr	r2, [pc, #600]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001256:	68d3      	ldr	r3, [r2, #12]
 8001258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800125e:	e004      	b.n	800126a <HAL_RCCEx_PeriphCLKConfig+0x36>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001260:	3004      	adds	r0, #4
 8001262:	f7ff ff2f 	bl	80010c4 <RCCEx_PLLSAI1_Config>
    default:
      ret = HAL_ERROR;
      break;
    }

    if(ret == HAL_OK)
 8001266:	4605      	mov	r5, r0
 8001268:	b958      	cbnz	r0, 8001282 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800126a:	4991      	ldr	r1, [pc, #580]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800126c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001270:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001274:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001276:	4313      	orrs	r3, r2
 8001278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800127c:	2500      	movs	r5, #0
 800127e:	e000      	b.n	8001282 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    case RCC_SAI1CLKSOURCE_PIN:      /* External clock is used as source of SAI1 clock*/
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001280:	2501      	movs	r5, #1
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001282:	6823      	ldr	r3, [r4, #0]
 8001284:	039e      	lsls	r6, r3, #14
 8001286:	d55a      	bpl.n	800133e <HAL_RCCEx_PeriphCLKConfig+0x10a>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001288:	4e89      	ldr	r6, [pc, #548]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800128a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800128c:	00d8      	lsls	r0, r3, #3
 800128e:	d40a      	bmi.n	80012a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001290:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001296:	65b3      	str	r3, [r6, #88]	; 0x58
 8001298:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800129a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80012a2:	2701      	movs	r7, #1
 80012a4:	e000      	b.n	80012a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
  {
    FlagStatus       pwrclkchanged = RESET;
 80012a6:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80012a8:	f8df 8208 	ldr.w	r8, [pc, #520]	; 80014b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
 80012ac:	f8d8 3000 	ldr.w	r3, [r8]
 80012b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b4:	f8c8 3000 	str.w	r3, [r8]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80012b8:	f7ff f93c 	bl	8000534 <HAL_GetTick>
 80012bc:	4681      	mov	r9, r0

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80012be:	f8d8 3000 	ldr.w	r3, [r8]
 80012c2:	05d9      	lsls	r1, r3, #23
 80012c4:	d406      	bmi.n	80012d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012c6:	f7ff f935 	bl	8000534 <HAL_GetTick>
 80012ca:	ebc9 0000 	rsb	r0, r9, r0
 80012ce:	2802      	cmp	r0, #2
 80012d0:	d9f5      	bls.n	80012be <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80012d2:	e02e      	b.n	8001332 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = HAL_TIMEOUT;
        break;
      }
    }

    if(ret == HAL_OK)
 80012d4:	bb75      	cbnz	r5, 8001334 <HAL_RCCEx_PeriphCLKConfig+0x100>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80012d6:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80012da:	4a75      	ldr	r2, [pc, #468]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80012dc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80012e0:	d014      	beq.n	800130c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80012e2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80012e4:	428b      	cmp	r3, r1
 80012e6:	d011      	beq.n	800130c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80012e8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80012ec:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80012f0:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80012f4:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80012f8:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
      
      if((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != PeriphClkInit->RTCClockSelection))
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80012fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001300:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001304:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800130c:	07da      	lsls	r2, r3, #31
 800130e:	f140 80c2 	bpl.w	8001496 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001312:	f7ff f90f 	bl	8000534 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001316:	f241 3988 	movw	r9, #5000	; 0x1388

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131a:	4680      	mov	r8, r0

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 800131c:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001320:	079b      	lsls	r3, r3, #30
 8001322:	f100 80b8 	bmi.w	8001496 <HAL_RCCEx_PeriphCLKConfig+0x262>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001326:	f7ff f905 	bl	8000534 <HAL_GetTick>
 800132a:	ebc8 0000 	rsb	r0, r8, r0
 800132e:	4548      	cmp	r0, r9
 8001330:	d9f4      	bls.n	800131c <HAL_RCCEx_PeriphCLKConfig+0xe8>

    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
      {
        ret = HAL_TIMEOUT;
 8001332:	2503      	movs	r5, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001334:	b11f      	cbz	r7, 800133e <HAL_RCCEx_PeriphCLKConfig+0x10a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001336:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800133c:	65b3      	str	r3, [r6, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800133e:	6823      	ldr	r3, [r4, #0]
 8001340:	07df      	lsls	r7, r3, #31
 8001342:	d508      	bpl.n	8001356 <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001344:	485a      	ldr	r0, [pc, #360]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001346:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800134a:	f022 0103 	bic.w	r1, r2, #3
 800134e:	6a22      	ldr	r2, [r4, #32]
 8001350:	430a      	orrs	r2, r1
 8001352:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001356:	079e      	lsls	r6, r3, #30
 8001358:	d508      	bpl.n	800136c <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800135a:	4855      	ldr	r0, [pc, #340]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800135c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001360:	f022 010c 	bic.w	r1, r2, #12
 8001364:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001366:	430a      	orrs	r2, r1
 8001368:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800136c:	0698      	lsls	r0, r3, #26
 800136e:	d508      	bpl.n	8001382 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001370:	484f      	ldr	r0, [pc, #316]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001372:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8001376:	f422 6140 	bic.w	r1, r2, #3072	; 0xc00
 800137a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800137c:	430a      	orrs	r2, r1
 800137e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001382:	0599      	lsls	r1, r3, #22
 8001384:	d508      	bpl.n	8001398 <HAL_RCCEx_PeriphCLKConfig+0x164>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001386:	484a      	ldr	r0, [pc, #296]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001388:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800138c:	f422 2140 	bic.w	r1, r2, #786432	; 0xc0000
 8001390:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001392:	430a      	orrs	r2, r1
 8001394:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001398:	055a      	lsls	r2, r3, #21
 800139a:	d508      	bpl.n	80013ae <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800139c:	4844      	ldr	r0, [pc, #272]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800139e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80013a2:	f422 1140 	bic.w	r1, r2, #3145728	; 0x300000
 80013a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80013a8:	430a      	orrs	r2, r1
 80013aa:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80013ae:	065f      	lsls	r7, r3, #25
 80013b0:	d508      	bpl.n	80013c4 <HAL_RCCEx_PeriphCLKConfig+0x190>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80013b2:	483f      	ldr	r0, [pc, #252]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013b4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80013b8:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 80013bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80013be:	430a      	orrs	r2, r1
 80013c0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80013c4:	05de      	lsls	r6, r3, #23
 80013c6:	d508      	bpl.n	80013da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80013c8:	4839      	ldr	r0, [pc, #228]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013ca:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80013ce:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 80013d2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80013d4:	430a      	orrs	r2, r1
 80013d6:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80013da:	0498      	lsls	r0, r3, #18
 80013dc:	d51a      	bpl.n	8001414 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013de:	4a34      	ldr	r2, [pc, #208]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80013e0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80013e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80013e6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80013ea:	430b      	orrs	r3, r1

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80013ec:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80013f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80013f4:	d104      	bne.n	8001400 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80013f6:	68d3      	ldr	r3, [r2, #12]
 80013f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013fc:	60d3      	str	r3, [r2, #12]
 80013fe:	e009      	b.n	8001414 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
    }
    else
    {
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001400:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001404:	d106      	bne.n	8001414 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001406:	2101      	movs	r1, #1
 8001408:	1d20      	adds	r0, r4, #4
 800140a:	f7ff fe5b 	bl	80010c4 <RCCEx_PLLSAI1_Config>
      
        if(ret != HAL_OK)
 800140e:	2800      	cmp	r0, #0
 8001410:	bf18      	it	ne
 8001412:	4605      	movne	r5, r0
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001414:	6823      	ldr	r3, [r4, #0]
 8001416:	0359      	lsls	r1, r3, #13
 8001418:	d51a      	bpl.n	8001450 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800141a:	4a25      	ldr	r2, [pc, #148]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800141c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800141e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001422:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001426:	430b      	orrs	r3, r1

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001428:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800142c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001430:	d104      	bne.n	800143c <HAL_RCCEx_PeriphCLKConfig+0x208>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001432:	68d3      	ldr	r3, [r2, #12]
 8001434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001438:	60d3      	str	r3, [r2, #12]
 800143a:	e009      	b.n	8001450 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    }
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800143c:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001440:	d106      	bne.n	8001450 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001442:	2101      	movs	r1, #1
 8001444:	1d20      	adds	r0, r4, #4
 8001446:	f7ff fe3d 	bl	80010c4 <RCCEx_PLLSAI1_Config>
      
      if(ret != HAL_OK)
 800144a:	2800      	cmp	r0, #0
 800144c:	bf18      	it	ne
 800144e:	4605      	movne	r5, r0
      }
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	045a      	lsls	r2, r3, #17
 8001454:	d512      	bpl.n	800147c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001456:	4916      	ldr	r1, [pc, #88]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001458:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800145a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800145e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001462:	4313      	orrs	r3, r2
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001464:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800146c:	d106      	bne.n	800147c <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800146e:	2102      	movs	r1, #2
 8001470:	1d20      	adds	r0, r4, #4
 8001472:	f7ff fe27 	bl	80010c4 <RCCEx_PLLSAI1_Config>

      if(ret != HAL_OK)
 8001476:	2800      	cmp	r0, #0
 8001478:	bf18      	it	ne
 800147a:	4605      	movne	r5, r0
  }

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	041b      	lsls	r3, r3, #16
 8001480:	d512      	bpl.n	80014a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001482:	490b      	ldr	r1, [pc, #44]	; (80014b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001484:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001488:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800148c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800148e:	4313      	orrs	r3, r2
 8001490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
  }

#endif /* DFSDM1_Filter0 */

  return status;
 8001494:	e008      	b.n	80014a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001496:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 800149a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800149e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80014a0:	4313      	orrs	r3, r2
 80014a2:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 80014a6:	e745      	b.n	8001334 <HAL_RCCEx_PeriphCLKConfig+0x100>
  }

#endif /* DFSDM1_Filter0 */

  return status;
}
 80014a8:	4628      	mov	r0, r5
 80014aa:	b003      	add	sp, #12
 80014ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40007000 	.word	0x40007000

080014b8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80014b8:	6a03      	ldr	r3, [r0, #32]
 80014ba:	f023 0301 	bic.w	r3, r3, #1
 80014be:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80014c0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80014c2:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80014c4:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80014c6:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80014c8:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80014ca:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80014ce:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80014d2:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80014d4:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80014d6:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80014da:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80014dc:	4d12      	ldr	r5, [pc, #72]	; (8001528 <TIM_OC1_SetConfig+0x70>)
 80014de:	42a8      	cmp	r0, r5
 80014e0:	d006      	beq.n	80014f0 <TIM_OC1_SetConfig+0x38>
 80014e2:	4e12      	ldr	r6, [pc, #72]	; (800152c <TIM_OC1_SetConfig+0x74>)
 80014e4:	42b0      	cmp	r0, r6
 80014e6:	d003      	beq.n	80014f0 <TIM_OC1_SetConfig+0x38>
 80014e8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80014ec:	42b0      	cmp	r0, r6
 80014ee:	d114      	bne.n	800151a <TIM_OC1_SetConfig+0x62>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80014f0:	68ce      	ldr	r6, [r1, #12]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80014f2:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80014f6:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80014f8:	42a8      	cmp	r0, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80014fa:	f023 0304 	bic.w	r3, r3, #4
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80014fe:	d006      	beq.n	800150e <TIM_OC1_SetConfig+0x56>
 8001500:	4d0a      	ldr	r5, [pc, #40]	; (800152c <TIM_OC1_SetConfig+0x74>)
 8001502:	42a8      	cmp	r0, r5
 8001504:	d003      	beq.n	800150e <TIM_OC1_SetConfig+0x56>
 8001506:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800150a:	42a8      	cmp	r0, r5
 800150c:	d105      	bne.n	800151a <TIM_OC1_SetConfig+0x62>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800150e:	694e      	ldr	r6, [r1, #20]
 8001510:	698d      	ldr	r5, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001512:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001516:	4335      	orrs	r5, r6
 8001518:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800151a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800151c:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800151e:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001520:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001522:	6203      	str	r3, [r0, #32]
 8001524:	bd70      	pop	{r4, r5, r6, pc}
 8001526:	bf00      	nop
 8001528:	40012c00 	.word	0x40012c00
 800152c:	40014000 	.word	0x40014000

08001530 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001530:	6a03      	ldr	r3, [r0, #32]
 8001532:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001536:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001538:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800153a:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800153c:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800153e:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001540:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001542:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001546:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800154a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 800154c:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800154e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8001552:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001556:	4d0f      	ldr	r5, [pc, #60]	; (8001594 <TIM_OC3_SetConfig+0x64>)
 8001558:	42a8      	cmp	r0, r5
 800155a:	d107      	bne.n	800156c <TIM_OC3_SetConfig+0x3c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 800155c:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800155e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8001562:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001566:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800156a:	e005      	b.n	8001578 <TIM_OC3_SetConfig+0x48>
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800156c:	4d0a      	ldr	r5, [pc, #40]	; (8001598 <TIM_OC3_SetConfig+0x68>)
 800156e:	42a8      	cmp	r0, r5
 8001570:	d002      	beq.n	8001578 <TIM_OC3_SetConfig+0x48>
 8001572:	4d0a      	ldr	r5, [pc, #40]	; (800159c <TIM_OC3_SetConfig+0x6c>)
 8001574:	42a8      	cmp	r0, r5
 8001576:	d107      	bne.n	8001588 <TIM_OC3_SetConfig+0x58>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8001578:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800157a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 800157e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8001582:	698d      	ldr	r5, [r1, #24]
 8001584:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001588:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800158a:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800158c:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800158e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001590:	6203      	str	r3, [r0, #32]
}
 8001592:	bd30      	pop	{r4, r5, pc}
 8001594:	40012c00 	.word	0x40012c00
 8001598:	40014000 	.word	0x40014000
 800159c:	40014400 	.word	0x40014400

080015a0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80015a0:	6a03      	ldr	r3, [r0, #32]
 80015a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015a6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80015a8:	6a02      	ldr	r2, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80015aa:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80015ac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80015ae:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80015b0:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80015b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015b6:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 80015ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 80015be:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80015c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 80015c4:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80015c8:	4d0a      	ldr	r5, [pc, #40]	; (80015f4 <TIM_OC4_SetConfig+0x54>)
 80015ca:	42a8      	cmp	r0, r5
 80015cc:	d007      	beq.n	80015de <TIM_OC4_SetConfig+0x3e>
 80015ce:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80015d2:	42a8      	cmp	r0, r5
 80015d4:	d003      	beq.n	80015de <TIM_OC4_SetConfig+0x3e>
 80015d6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015da:	42a8      	cmp	r0, r5
 80015dc:	d104      	bne.n	80015e8 <TIM_OC4_SetConfig+0x48>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80015de:	694d      	ldr	r5, [r1, #20]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80015e0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 80015e4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015e8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80015ea:	61c3      	str	r3, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80015ec:	684b      	ldr	r3, [r1, #4]
 80015ee:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015f0:	6202      	str	r2, [r0, #32]
 80015f2:	bd30      	pop	{r4, r5, pc}
 80015f4:	40012c00 	.word	0x40012c00

080015f8 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80015f8:	6a03      	ldr	r3, [r0, #32]
 80015fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fe:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001600:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001602:	6842      	ldr	r2, [r0, #4]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001604:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001606:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001608:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800160a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800160e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001612:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 8001614:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001616:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16);
 800161a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800161e:	4d0b      	ldr	r5, [pc, #44]	; (800164c <TIM_OC5_SetConfig+0x54>)
 8001620:	42a8      	cmp	r0, r5
 8001622:	d007      	beq.n	8001634 <TIM_OC5_SetConfig+0x3c>
 8001624:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001628:	42a8      	cmp	r0, r5
 800162a:	d003      	beq.n	8001634 <TIM_OC5_SetConfig+0x3c>
 800162c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001630:	42a8      	cmp	r0, r5
 8001632:	d104      	bne.n	800163e <TIM_OC5_SetConfig+0x46>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 8001634:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 16);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001636:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8);
 800163a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800163e:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001640:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001642:	6544      	str	r4, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001644:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001646:	6203      	str	r3, [r0, #32]
 8001648:	bd30      	pop	{r4, r5, pc}
 800164a:	bf00      	nop
 800164c:	40012c00 	.word	0x40012c00

08001650 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001650:	6a03      	ldr	r3, [r0, #32]
 8001652:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001656:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001658:	6a02      	ldr	r2, [r0, #32]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800165a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800165c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800165e:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001660:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800166a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 800166e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001670:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20);
 8001674:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001678:	4d0a      	ldr	r5, [pc, #40]	; (80016a4 <TIM_OC6_SetConfig+0x54>)
 800167a:	42a8      	cmp	r0, r5
 800167c:	d007      	beq.n	800168e <TIM_OC6_SetConfig+0x3e>
 800167e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001682:	42a8      	cmp	r0, r5
 8001684:	d003      	beq.n	800168e <TIM_OC6_SetConfig+0x3e>
 8001686:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800168a:	42a8      	cmp	r0, r5
 800168c:	d104      	bne.n	8001698 <TIM_OC6_SetConfig+0x48>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 800168e:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 20);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001690:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10);
 8001694:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001698:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800169a:	6543      	str	r3, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800169c:	684b      	ldr	r3, [r1, #4]
 800169e:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016a0:	6202      	str	r2, [r0, #32]
 80016a2:	bd30      	pop	{r4, r5, pc}
 80016a4:	40012c00 	.word	0x40012c00

080016a8 <HAL_TIM_Base_MspInit>:
 80016a8:	4770      	bx	lr
	...

080016ac <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016ac:	4a18      	ldr	r2, [pc, #96]	; (8001710 <TIM_Base_SetConfig+0x64>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 80016ae:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016b0:	4290      	cmp	r0, r2
  * @param  TIMx: TIM peripheral
  * @param  Structure: TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80016b2:	b510      	push	{r4, lr}
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016b4:	d002      	beq.n	80016bc <TIM_Base_SetConfig+0x10>
 80016b6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016ba:	d109      	bne.n	80016d0 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80016bc:	684c      	ldr	r4, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016c2:	4290      	cmp	r0, r2
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80016c4:	ea43 0304 	orr.w	r3, r3, r4
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80016c8:	d009      	beq.n	80016de <TIM_Base_SetConfig+0x32>
 80016ca:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016ce:	d006      	beq.n	80016de <TIM_Base_SetConfig+0x32>
 80016d0:	4a10      	ldr	r2, [pc, #64]	; (8001714 <TIM_Base_SetConfig+0x68>)
 80016d2:	4290      	cmp	r0, r2
 80016d4:	d003      	beq.n	80016de <TIM_Base_SetConfig+0x32>
 80016d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80016da:	4290      	cmp	r0, r2
 80016dc:	d103      	bne.n	80016e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016de:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80016e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016e4:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80016e6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016e8:	688b      	ldr	r3, [r1, #8]
 80016ea:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80016ec:	680b      	ldr	r3, [r1, #0]
 80016ee:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016f0:	4b07      	ldr	r3, [pc, #28]	; (8001710 <TIM_Base_SetConfig+0x64>)
 80016f2:	4298      	cmp	r0, r3
 80016f4:	d007      	beq.n	8001706 <TIM_Base_SetConfig+0x5a>
 80016f6:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80016fa:	4298      	cmp	r0, r3
 80016fc:	d003      	beq.n	8001706 <TIM_Base_SetConfig+0x5a>
 80016fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001702:	4298      	cmp	r0, r3
 8001704:	d101      	bne.n	800170a <TIM_Base_SetConfig+0x5e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001706:	690b      	ldr	r3, [r1, #16]
 8001708:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800170a:	2301      	movs	r3, #1
 800170c:	6143      	str	r3, [r0, #20]
 800170e:	bd10      	pop	{r4, pc}
 8001710:	40012c00 	.word	0x40012c00
 8001714:	40014000 	.word	0x40014000

08001718 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001718:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800171a:	4604      	mov	r4, r0
 800171c:	b1a0      	cbz	r0, 8001748 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 800171e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001722:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001726:	b91b      	cbnz	r3, 8001730 <HAL_TIM_Base_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001728:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800172c:	f7ff ffbc 	bl	80016a8 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001730:	2302      	movs	r3, #2
 8001732:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001736:	6820      	ldr	r0, [r4, #0]
 8001738:	1d21      	adds	r1, r4, #4
 800173a:	f7ff ffb7 	bl	80016ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800173e:	2301      	movs	r3, #1
 8001740:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8001744:	2000      	movs	r0, #0
 8001746:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001748:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 800174a:	bd10      	pop	{r4, pc}

0800174c <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and initialize the associated handle.
  * @param  htim: TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800174c:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800174e:	4604      	mov	r4, r0
 8001750:	b1a0      	cbz	r0, 800177c <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001752:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001756:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800175a:	b91b      	cbnz	r3, 8001764 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800175c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001760:	f000 fe72 	bl	8002448 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001764:	2302      	movs	r3, #2
 8001766:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800176a:	6820      	ldr	r0, [r4, #0]
 800176c:	1d21      	adds	r1, r4, #4
 800176e:	f7ff ff9d 	bl	80016ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001772:	2301      	movs	r3, #1
 8001774:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8001778:	2000      	movs	r0, #0
 800177a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800177c:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 800177e:	bd10      	pop	{r4, pc}

08001780 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001780:	6a03      	ldr	r3, [r0, #32]
 8001782:	f023 0310 	bic.w	r3, r3, #16
 8001786:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001788:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800178a:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800178c:	b530      	push	{r4, r5, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800178e:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001790:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001792:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8001796:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 800179a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 800179e:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80017a0:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 80017a4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80017a8:	4d0f      	ldr	r5, [pc, #60]	; (80017e8 <TIM_OC2_SetConfig+0x68>)
 80017aa:	42a8      	cmp	r0, r5
 80017ac:	d107      	bne.n	80017be <TIM_OC2_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80017ae:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80017b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 80017b4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80017b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80017bc:	e005      	b.n	80017ca <TIM_OC2_SetConfig+0x4a>

  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80017be:	4d0b      	ldr	r5, [pc, #44]	; (80017ec <TIM_OC2_SetConfig+0x6c>)
 80017c0:	42a8      	cmp	r0, r5
 80017c2:	d002      	beq.n	80017ca <TIM_OC2_SetConfig+0x4a>
 80017c4:	4d0a      	ldr	r5, [pc, #40]	; (80017f0 <TIM_OC2_SetConfig+0x70>)
 80017c6:	42a8      	cmp	r0, r5
 80017c8:	d107      	bne.n	80017da <TIM_OC2_SetConfig+0x5a>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80017ca:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80017cc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80017d0:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80017d4:	698d      	ldr	r5, [r1, #24]
 80017d6:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80017da:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80017dc:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80017de:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80017e0:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80017e2:	6203      	str	r3, [r0, #32]
}
 80017e4:	bd30      	pop	{r4, r5, pc}
 80017e6:	bf00      	nop
 80017e8:	40012c00 	.word	0x40012c00
 80017ec:	40014000 	.word	0x40014000
 80017f0:	40014400 	.word	0x40014400

080017f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 80017f4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80017f6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80017fa:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef* sConfig,
                                            uint32_t Channel)
{
 80017fc:	4604      	mov	r4, r0
 80017fe:	460d      	mov	r5, r1
 8001800:	f04f 0002 	mov.w	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001804:	d07b      	beq.n	80018fe <HAL_TIM_PWM_ConfigChannel+0x10a>
 8001806:	2301      	movs	r3, #1

  htim->State = HAL_TIM_STATE_BUSY;

  switch (Channel)
 8001808:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800180a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800180e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  switch (Channel)
 8001812:	d03c      	beq.n	800188e <HAL_TIM_PWM_ConfigChannel+0x9a>
 8001814:	d813      	bhi.n	800183e <HAL_TIM_PWM_ConfigChannel+0x4a>
 8001816:	b34a      	cbz	r2, 800186c <HAL_TIM_PWM_ConfigChannel+0x78>
 8001818:	2a04      	cmp	r2, #4
 800181a:	d16a      	bne.n	80018f2 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800181c:	6820      	ldr	r0, [r4, #0]
 800181e:	f7ff ffaf 	bl	8001780 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001822:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001824:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001826:	699a      	ldr	r2, [r3, #24]
 8001828:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800182c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800182e:	699a      	ldr	r2, [r3, #24]
 8001830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001834:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001836:	699a      	ldr	r2, [r3, #24]
 8001838:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800183c:	e025      	b.n	800188a <HAL_TIM_PWM_ConfigChannel+0x96>
  /* Process Locked */
  __HAL_LOCK(htim);

  htim->State = HAL_TIM_STATE_BUSY;

  switch (Channel)
 800183e:	2a10      	cmp	r2, #16
 8001840:	d036      	beq.n	80018b0 <HAL_TIM_PWM_ConfigChannel+0xbc>
 8001842:	2a14      	cmp	r2, #20
 8001844:	d044      	beq.n	80018d0 <HAL_TIM_PWM_ConfigChannel+0xdc>
 8001846:	2a0c      	cmp	r2, #12
 8001848:	d153      	bne.n	80018f2 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800184a:	6820      	ldr	r0, [r4, #0]
 800184c:	f7ff fea8 	bl	80015a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001850:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001852:	6909      	ldr	r1, [r1, #16]

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001854:	69da      	ldr	r2, [r3, #28]
 8001856:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800185a:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800185c:	69da      	ldr	r2, [r3, #28]
 800185e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001862:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001864:	69da      	ldr	r2, [r3, #28]
 8001866:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800186a:	e01f      	b.n	80018ac <HAL_TIM_PWM_ConfigChannel+0xb8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800186c:	6820      	ldr	r0, [r4, #0]
 800186e:	f7ff fe23 	bl	80014b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	f042 0208 	orr.w	r2, r2, #8
 800187a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800187c:	699a      	ldr	r2, [r3, #24]
 800187e:	f022 0204 	bic.w	r2, r2, #4
 8001882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001884:	6999      	ldr	r1, [r3, #24]
 8001886:	692a      	ldr	r2, [r5, #16]
 8001888:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800188a:	619a      	str	r2, [r3, #24]
    }
    break;
 800188c:	e031      	b.n	80018f2 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800188e:	6820      	ldr	r0, [r4, #0]
 8001890:	f7ff fe4e 	bl	8001530 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001894:	6823      	ldr	r3, [r4, #0]
 8001896:	69da      	ldr	r2, [r3, #28]
 8001898:	f042 0208 	orr.w	r2, r2, #8
 800189c:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800189e:	69da      	ldr	r2, [r3, #28]
 80018a0:	f022 0204 	bic.w	r2, r2, #4
 80018a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80018a6:	69d9      	ldr	r1, [r3, #28]
 80018a8:	692a      	ldr	r2, [r5, #16]
 80018aa:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80018ac:	61da      	str	r2, [r3, #28]
    }
    break;
 80018ae:	e020      	b.n	80018f2 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80018b0:	6820      	ldr	r0, [r4, #0]
 80018b2:	f7ff fea1 	bl	80015f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80018b6:	6823      	ldr	r3, [r4, #0]
 80018b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80018ba:	f042 0208 	orr.w	r2, r2, #8
 80018be:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80018c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80018c2:	f022 0204 	bic.w	r2, r2, #4
 80018c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80018c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80018ca:	692a      	ldr	r2, [r5, #16]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	e00f      	b.n	80018f0 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80018d0:	6820      	ldr	r0, [r4, #0]
 80018d2:	f7ff febd 	bl	8001650 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80018d6:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 80018d8:	6909      	ldr	r1, [r1, #16]

     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80018da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80018dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018e0:	655a      	str	r2, [r3, #84]	; 0x54

     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80018e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80018e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018e8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8;
 80018ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80018ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80018f0:	655a      	str	r2, [r3, #84]	; 0x54

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 80018f2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80018f4:	2000      	movs	r0, #0

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 80018f6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80018fa:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 80018fe:	bd38      	pop	{r3, r4, r5, pc}

08001900 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001900:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8001902:	6884      	ldr	r4, [r0, #8]
 8001904:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8001908:	4321      	orrs	r1, r4
 800190a:	430a      	orrs	r2, r1

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800190c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001910:	6083      	str	r3, [r0, #8]
 8001912:	bd10      	pop	{r4, pc}

08001914 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001914:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001918:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800191a:	b570      	push	{r4, r5, r6, lr}
 800191c:	4604      	mov	r4, r0
 800191e:	f04f 0002 	mov.w	r0, #2
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001922:	f000 80ab 	beq.w	8001a7c <HAL_TIM_ConfigClockSource+0x168>

  htim->State = HAL_TIM_STATE_BUSY;
 8001926:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800192a:	6820      	ldr	r0, [r4, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 800192c:	2301      	movs	r3, #1
 800192e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001932:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001934:	4b52      	ldr	r3, [pc, #328]	; (8001a80 <HAL_TIM_ConfigClockSource+0x16c>)
 8001936:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001938:	6083      	str	r3, [r0, #8]

  switch (sClockSourceConfig->ClockSource)
 800193a:	680b      	ldr	r3, [r1, #0]
 800193c:	2b40      	cmp	r3, #64	; 0x40
 800193e:	d074      	beq.n	8001a2a <HAL_TIM_ConfigClockSource+0x116>
 8001940:	d818      	bhi.n	8001974 <HAL_TIM_ConfigClockSource+0x60>
 8001942:	2b10      	cmp	r3, #16
 8001944:	f000 8088 	beq.w	8001a58 <HAL_TIM_ConfigClockSource+0x144>
 8001948:	d808      	bhi.n	800195c <HAL_TIM_ConfigClockSource+0x48>
 800194a:	2b00      	cmp	r3, #0
 800194c:	f040 8090 	bne.w	8001a70 <HAL_TIM_ConfigClockSource+0x15c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001950:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001956:	f043 0307 	orr.w	r3, r3, #7
 800195a:	e088      	b.n	8001a6e <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 800195c:	2b20      	cmp	r3, #32
 800195e:	f000 8081 	beq.w	8001a64 <HAL_TIM_ConfigClockSource+0x150>
 8001962:	2b30      	cmp	r3, #48	; 0x30
 8001964:	f040 8084 	bne.w	8001a70 <HAL_TIM_ConfigClockSource+0x15c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001968:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800196a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800196e:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001972:	e07c      	b.n	8001a6e <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8001974:	2b70      	cmp	r3, #112	; 0x70
 8001976:	d032      	beq.n	80019de <HAL_TIM_ConfigClockSource+0xca>
 8001978:	d81b      	bhi.n	80019b2 <HAL_TIM_ConfigClockSource+0x9e>
 800197a:	2b50      	cmp	r3, #80	; 0x50
 800197c:	d03e      	beq.n	80019fc <HAL_TIM_ConfigClockSource+0xe8>
 800197e:	2b60      	cmp	r3, #96	; 0x60
 8001980:	d176      	bne.n	8001a70 <HAL_TIM_ConfigClockSource+0x15c>

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001982:	684d      	ldr	r5, [r1, #4]
 8001984:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001986:	6a01      	ldr	r1, [r0, #32]
 8001988:	f021 0110 	bic.w	r1, r1, #16
 800198c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800198e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001990:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001992:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001996:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 800199a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 800199e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80019a2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80019a4:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80019a6:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80019a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80019ac:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80019b0:	e05d      	b.n	8001a6e <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 80019b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019b6:	d00c      	beq.n	80019d2 <HAL_TIM_ConfigClockSource+0xbe>
 80019b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019bc:	d158      	bne.n	8001a70 <HAL_TIM_ConfigClockSource+0x15c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80019be:	68cb      	ldr	r3, [r1, #12]
 80019c0:	684a      	ldr	r2, [r1, #4]
 80019c2:	6889      	ldr	r1, [r1, #8]
 80019c4:	f7ff ff9c 	bl	8001900 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019c8:	6822      	ldr	r2, [r4, #0]
 80019ca:	6893      	ldr	r3, [r2, #8]
 80019cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d0:	e012      	b.n	80019f8 <HAL_TIM_ConfigClockSource+0xe4>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80019d2:	6883      	ldr	r3, [r0, #8]
 80019d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d8:	f023 0307 	bic.w	r3, r3, #7
 80019dc:	e047      	b.n	8001a6e <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80019de:	68cb      	ldr	r3, [r1, #12]
 80019e0:	684a      	ldr	r2, [r1, #4]
 80019e2:	6889      	ldr	r1, [r1, #8]
 80019e4:	f7ff ff8c 	bl	8001900 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 80019e8:	6822      	ldr	r2, [r4, #0]
 80019ea:	6893      	ldr	r3, [r2, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80019ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019f8:	6093      	str	r3, [r2, #8]
    }
    break;
 80019fa:	e039      	b.n	8001a70 <HAL_TIM_ConfigClockSource+0x15c>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80019fc:	6a03      	ldr	r3, [r0, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 80019fe:	684d      	ldr	r5, [r1, #4]
 8001a00:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a02:	6a01      	ldr	r1, [r0, #32]
 8001a04:	f021 0101 	bic.w	r1, r1, #1
 8001a08:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a0a:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a0c:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a10:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8001a14:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001a16:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a1a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001a1c:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001a1e:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a24:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001a28:	e021      	b.n	8001a6e <HAL_TIM_ConfigClockSource+0x15a>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001a2a:	6a03      	ldr	r3, [r0, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a2c:	684d      	ldr	r5, [r1, #4]
 8001a2e:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a30:	6a01      	ldr	r1, [r0, #32]
 8001a32:	f021 0101 	bic.w	r1, r1, #1
 8001a36:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a38:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a3a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a3e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8001a42:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001a44:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a48:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001a4a:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001a4c:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a52:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001a56:	e00a      	b.n	8001a6e <HAL_TIM_ConfigClockSource+0x15a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001a58:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a5e:	f043 0317 	orr.w	r3, r3, #23
 8001a62:	e004      	b.n	8001a6e <HAL_TIM_ConfigClockSource+0x15a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001a64:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a6a:	f043 0327 	orr.w	r3, r3, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001a6e:	6083      	str	r3, [r0, #8]
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a70:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8001a72:	2000      	movs	r0, #0
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8001a74:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8001a78:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 8001a7c:	bd70      	pop	{r4, r5, r6, pc}
 8001a7e:	bf00      	nop
 8001a80:	fffe0088 	.word	0xfffe0088

08001a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001a84:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001a86:	2301      	movs	r3, #1
 8001a88:	6a04      	ldr	r4, [r0, #32]
 8001a8a:	408b      	lsls	r3, r1
 8001a8c:	ea24 0303 	bic.w	r3, r4, r3
 8001a90:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001a92:	6a03      	ldr	r3, [r0, #32]
 8001a94:	408a      	lsls	r2, r1
 8001a96:	ea42 0103 	orr.w	r1, r2, r3
 8001a9a:	6201      	str	r1, [r0, #32]
 8001a9c:	bd10      	pop	{r4, pc}
	...

08001aa0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001aa0:	b510      	push	{r4, lr}
 8001aa2:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	6800      	ldr	r0, [r0, #0]
 8001aa8:	f7ff ffec 	bl	8001a84 <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_TIM_PWM_Start+0x38>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d007      	beq.n	8001ac4 <HAL_TIM_PWM_Start+0x24>
 8001ab4:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d003      	beq.n	8001ac4 <HAL_TIM_PWM_Start+0x24>
 8001abc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d103      	bne.n	8001acc <HAL_TIM_PWM_Start+0x2c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001ac4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ac6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	f042 0201 	orr.w	r2, r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	bd10      	pop	{r4, pc}
 8001ad8:	40012c00 	.word	0x40012c00

08001adc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001adc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ae0:	2b01      	cmp	r3, #1
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001ae2:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001ae4:	d018      	beq.n	8001b18 <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ae6:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001ae8:	4c0c      	ldr	r4, [pc, #48]	; (8001b1c <HAL_TIMEx_MasterConfigSynchronization+0x40>)

  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001aea:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001aec:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001aee:	42a2      	cmp	r2, r4
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001af0:	bf02      	ittt	eq
 8001af2:	684c      	ldreq	r4, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001af4:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001af8:	4323      	orreq	r3, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001afa:	680c      	ldr	r4, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001afc:	6889      	ldr	r1, [r1, #8]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b02:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001b04:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b08:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b0a:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8001b0c:	2300      	movs	r3, #0

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001b0e:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 8001b10:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001b18:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8001b1a:	bd30      	pop	{r4, r5, pc}
 8001b1c:	40012c00 	.word	0x40012c00

08001b20 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001b20:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001b24:	2b01      	cmp	r3, #1
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8001b26:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001b28:	d034      	beq.n	8001b94 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001b2a:	68cb      	ldr	r3, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8001b2c:	6804      	ldr	r4, [r0, #0]
  the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001b2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b32:	688b      	ldr	r3, [r1, #8]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001b3a:	684b      	ldr	r3, [r1, #4]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001b42:	680b      	ldr	r3, [r1, #0]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001b4a:	690b      	ldr	r3, [r1, #16]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001b52:	694b      	ldr	r3, [r1, #20]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001b58:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	698b      	ldr	r3, [r1, #24]
 8001b60:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001b64:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
  
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8001b68:	4a0b      	ldr	r2, [pc, #44]	; (8001b98 <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
 8001b6a:	4294      	cmp	r4, r2
 8001b6c:	d10c      	bne.n	8001b88 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001b6e:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8001b70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001b74:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8001b78:	69ca      	ldr	r2, [r1, #28]
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    
    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8001b7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001b84:	6a0b      	ldr	r3, [r1, #32]
 8001b86:	4313      	orrs	r3, r2
  }
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001b88:	6463      	str	r3, [r4, #68]	; 0x44
  
  __HAL_UNLOCK(htim);
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

  return HAL_OK;
 8001b90:	4618      	mov	r0, r3
 8001b92:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001b94:	2002      	movs	r0, #2
  htim->Instance->BDTR = tmpbdtr;
  
  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8001b96:	bd10      	pop	{r4, pc}
 8001b98:	40012c00 	.word	0x40012c00

08001b9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b9e:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ba0:	6805      	ldr	r5, [r0, #0]
 8001ba2:	6923      	ldr	r3, [r4, #16]
 8001ba4:	68a2      	ldr	r2, [r4, #8]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001ba6:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ba8:	6828      	ldr	r0, [r5, #0]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	6963      	ldr	r3, [r4, #20]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	ea43 0201 	orr.w	r2, r3, r1
 8001bb4:	4b7d      	ldr	r3, [pc, #500]	; (8001dac <UART_SetConfig+0x210>)
 8001bb6:	4003      	ands	r3, r0
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bbc:	686b      	ldr	r3, [r5, #4]
 8001bbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001bc2:	68e3      	ldr	r3, [r4, #12]
 8001bc4:	4313      	orrs	r3, r2
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001bc6:	4a7a      	ldr	r2, [pc, #488]	; (8001db0 <UART_SetConfig+0x214>)
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bc8:	606b      	str	r3, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001bca:	4295      	cmp	r5, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001bcc:	bf18      	it	ne
 8001bce:	6a22      	ldrne	r2, [r4, #32]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001bd0:	69a3      	ldr	r3, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001bd2:	bf18      	it	ne
 8001bd4:	4313      	orrne	r3, r2
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001bd6:	68aa      	ldr	r2, [r5, #8]
 8001bd8:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001be0:	4b74      	ldr	r3, [pc, #464]	; (8001db4 <UART_SetConfig+0x218>)
 8001be2:	429d      	cmp	r5, r3
 8001be4:	d107      	bne.n	8001bf6 <UART_SetConfig+0x5a>
 8001be6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001bea:	4a73      	ldr	r2, [pc, #460]	; (8001db8 <UART_SetConfig+0x21c>)
 8001bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	e009      	b.n	8001c0a <UART_SetConfig+0x6e>
 8001bf6:	4b71      	ldr	r3, [pc, #452]	; (8001dbc <UART_SetConfig+0x220>)
 8001bf8:	429d      	cmp	r5, r3
 8001bfa:	d10b      	bne.n	8001c14 <UART_SetConfig+0x78>
 8001bfc:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8001c00:	4a6f      	ldr	r2, [pc, #444]	; (8001dc0 <UART_SetConfig+0x224>)
 8001c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c06:	f003 030c 	and.w	r3, r3, #12
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c0a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001c0e:	5cd3      	ldrb	r3, [r2, r3]
 8001c10:	d065      	beq.n	8001cde <UART_SetConfig+0x142>
 8001c12:	e099      	b.n	8001d48 <UART_SetConfig+0x1ac>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c14:	4b66      	ldr	r3, [pc, #408]	; (8001db0 <UART_SetConfig+0x214>)
 8001c16:	429d      	cmp	r5, r3
 8001c18:	f040 8089 	bne.w	8001d2e <UART_SetConfig+0x192>
 8001c1c:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8001c20:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8001c24:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8001c28:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8001c2c:	d014      	beq.n	8001c58 <UART_SetConfig+0xbc>
 8001c2e:	d805      	bhi.n	8001c3c <UART_SetConfig+0xa0>
 8001c30:	2d00      	cmp	r5, #0
 8001c32:	f040 80b7 	bne.w	8001da4 <UART_SetConfig+0x208>
    tmpreg = 0;

    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
 8001c36:	f7ff fa15 	bl	8001064 <HAL_RCC_GetPCLK1Freq>
      break;
 8001c3a:	e010      	b.n	8001c5e <UART_SetConfig+0xc2>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c3c:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8001c40:	d007      	beq.n	8001c52 <UART_SetConfig+0xb6>
 8001c42:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8001c46:	f040 80ad 	bne.w	8001da4 <UART_SetConfig+0x208>
 8001c4a:	2508      	movs	r5, #8
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
      break;
    case UART_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t) LSE_VALUE;
 8001c4c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001c50:	e008      	b.n	8001c64 <UART_SetConfig+0xc8>
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c52:	2502      	movs	r5, #2
    {
    case UART_CLOCKSOURCE_PCLK1:
      tmpreg = HAL_RCC_GetPCLK1Freq();
      break;
    case UART_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t) HSI_VALUE;
 8001c54:	485b      	ldr	r0, [pc, #364]	; (8001dc4 <UART_SetConfig+0x228>)
 8001c56:	e005      	b.n	8001c64 <UART_SetConfig+0xc8>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      tmpreg = HAL_RCC_GetSysClockFreq();
 8001c58:	f7fe fe36 	bl	80008c8 <HAL_RCC_GetSysClockFreq>
      break;
 8001c5c:	2504      	movs	r5, #4
        ret = HAL_ERROR;
      break;
    }

    /* if proper clock source reported */
    if (tmpreg != 0)
 8001c5e:	2800      	cmp	r0, #0
 8001c60:	f000 809e 	beq.w	8001da0 <UART_SetConfig+0x204>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ( (tmpreg < (3 * huart->Init.BaudRate) ) ||
 8001c64:	6862      	ldr	r2, [r4, #4]
 8001c66:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8001c6a:	4283      	cmp	r3, r0
 8001c6c:	f200 809a 	bhi.w	8001da4 <UART_SetConfig+0x208>
 8001c70:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8001c74:	f200 8096 	bhi.w	8001da4 <UART_SetConfig+0x208>
      {
        ret = HAL_ERROR;
      }
      else
      {
        switch (clocksource)
 8001c78:	2d08      	cmp	r5, #8
 8001c7a:	d827      	bhi.n	8001ccc <UART_SetConfig+0x130>
 8001c7c:	e8df f005 	tbb	[pc, r5]
 8001c80:	26082605 	.word	0x26082605
 8001c84:	2626260e 	.word	0x2626260e
 8001c88:	1b          	.byte	0x1b
 8001c89:	00          	.byte	0x00
        {
        case UART_CLOCKSOURCE_PCLK1:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c8a:	f7ff f9eb 	bl	8001064 <HAL_RCC_GetPCLK1Freq>
 8001c8e:	e007      	b.n	8001ca0 <UART_SetConfig+0x104>
          break;
        case UART_CLOCKSOURCE_HSI:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8001c90:	484d      	ldr	r0, [pc, #308]	; (8001dc8 <UART_SetConfig+0x22c>)
 8001c92:	0855      	lsrs	r5, r2, #1
 8001c94:	2300      	movs	r3, #0
 8001c96:	2100      	movs	r1, #0
 8001c98:	1940      	adds	r0, r0, r5
 8001c9a:	e011      	b.n	8001cc0 <UART_SetConfig+0x124>
          break;
        case UART_CLOCKSOURCE_SYSCLK:
          tmpreg = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c9c:	f7fe fe14 	bl	80008c8 <HAL_RCC_GetSysClockFreq>
 8001ca0:	6862      	ldr	r2, [r4, #4]
 8001ca2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ca6:	0856      	lsrs	r6, r2, #1
 8001ca8:	2700      	movs	r7, #0
 8001caa:	fbe1 6700 	umlal	r6, r7, r1, r0
 8001cae:	2300      	movs	r3, #0
 8001cb0:	4630      	mov	r0, r6
 8001cb2:	4639      	mov	r1, r7
 8001cb4:	e006      	b.n	8001cc4 <UART_SetConfig+0x128>
          break;
        case UART_CLOCKSOURCE_LSE:
          tmpreg = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8001cb6:	0850      	lsrs	r0, r2, #1
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8001cc0:	f141 0100 	adc.w	r1, r1, #0
 8001cc4:	f7fe fa82 	bl	80001cc <__aeabi_uldivmod>
          break;
 8001cc8:	2200      	movs	r2, #0
 8001cca:	e000      	b.n	8001cce <UART_SetConfig+0x132>
        case UART_CLOCKSOURCE_UNDEFINED:
        default:
          ret = HAL_ERROR;
 8001ccc:	2201      	movs	r2, #1
          break;
        }
   
        if ((tmpreg >= UART_LPUART_BRR_MIN) && (tmpreg <= UART_LPUART_BRR_MAX))
 8001cce:	4b3f      	ldr	r3, [pc, #252]	; (8001dcc <UART_SetConfig+0x230>)
 8001cd0:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8001cd4:	4299      	cmp	r1, r3
 8001cd6:	d865      	bhi.n	8001da4 <UART_SetConfig+0x208>
        {
           huart->Instance->BRR = tmpreg;
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	60d8      	str	r0, [r3, #12]
 8001cdc:	e063      	b.n	8001da6 <UART_SetConfig+0x20a>
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d828      	bhi.n	8001d34 <UART_SetConfig+0x198>
 8001ce2:	e8df f003 	tbb	[pc, r3]
 8001ce6:	0805      	.short	0x0805
 8001ce8:	2712270b 	.word	0x2712270b
 8001cec:	2727      	.short	0x2727
 8001cee:	1b          	.byte	0x1b
 8001cef:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001cf0:	f7ff f9b8 	bl	8001064 <HAL_RCC_GetPCLK1Freq>
 8001cf4:	e00b      	b.n	8001d0e <UART_SetConfig+0x172>
      break;
    case UART_CLOCKSOURCE_PCLK2:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001cf6:	f7ff f9cd 	bl	8001094 <HAL_RCC_GetPCLK2Freq>
 8001cfa:	e008      	b.n	8001d0e <UART_SetConfig+0x172>
      break;
    case UART_CLOCKSOURCE_HSI:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001cfc:	6860      	ldr	r0, [r4, #4]
 8001cfe:	0842      	lsrs	r2, r0, #1
 8001d00:	f102 73f4 	add.w	r3, r2, #31981568	; 0x1e80000
 8001d04:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8001d08:	e00c      	b.n	8001d24 <UART_SetConfig+0x188>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d0a:	f7fe fddd 	bl	80008c8 <HAL_RCC_GetSysClockFreq>
 8001d0e:	6863      	ldr	r3, [r4, #4]
 8001d10:	085a      	lsrs	r2, r3, #1
 8001d12:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8001d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d1a:	e005      	b.n	8001d28 <UART_SetConfig+0x18c>
      break;
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001d1c:	6860      	ldr	r0, [r4, #4]
 8001d1e:	0843      	lsrs	r3, r0, #1
 8001d20:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001d24:	fbb3 f3f0 	udiv	r3, r3, r0
 8001d28:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d2a:	2200      	movs	r2, #0
    case UART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
 8001d2c:	e004      	b.n	8001d38 <UART_SetConfig+0x19c>
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d2e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8001d32:	d137      	bne.n	8001da4 <UART_SetConfig+0x208>
    case UART_CLOCKSOURCE_LSE:
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8001d34:	2201      	movs	r2, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
 8001d36:	2300      	movs	r3, #0
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8001d38:	f3c3 0042 	ubfx	r0, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001d3c:	6821      	ldr	r1, [r4, #0]
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8001d3e:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 8001d42:	4303      	orrs	r3, r0
 8001d44:	60cb      	str	r3, [r1, #12]
 8001d46:	e02e      	b.n	8001da6 <UART_SetConfig+0x20a>
  }
  else
  {
    switch (clocksource)
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d82b      	bhi.n	8001da4 <UART_SetConfig+0x208>
 8001d4c:	e8df f003 	tbb	[pc, r3]
 8001d50:	2a0b0805 	.word	0x2a0b0805
 8001d54:	2a2a2a14 	.word	0x2a2a2a14
 8001d58:	1e          	.byte	0x1e
 8001d59:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d5a:	f7ff f983 	bl	8001064 <HAL_RCC_GetPCLK1Freq>
 8001d5e:	e00d      	b.n	8001d7c <UART_SetConfig+0x1e0>
      break;
    case UART_CLOCKSOURCE_PCLK2:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001d60:	f7ff f998 	bl	8001094 <HAL_RCC_GetPCLK2Freq>
 8001d64:	e00a      	b.n	8001d7c <UART_SetConfig+0x1e0>
      break;
    case UART_CLOCKSOURCE_HSI:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001d66:	6861      	ldr	r1, [r4, #4]
 8001d68:	084a      	lsrs	r2, r1, #1
 8001d6a:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 8001d6e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001d72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d76:	e00f      	b.n	8001d98 <UART_SetConfig+0x1fc>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d78:	f7fe fda6 	bl	80008c8 <HAL_RCC_GetSysClockFreq>
 8001d7c:	6863      	ldr	r3, [r4, #4]
 8001d7e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001d82:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d86:	b280      	uxth	r0, r0
 8001d88:	60e8      	str	r0, [r5, #12]
 8001d8a:	e007      	b.n	8001d9c <UART_SetConfig+0x200>
      break;
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001d8c:	6862      	ldr	r2, [r4, #4]
 8001d8e:	0853      	lsrs	r3, r2, #1
 8001d90:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001d94:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001d9c:	2200      	movs	r2, #0
    case UART_CLOCKSOURCE_SYSCLK:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
      huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
 8001d9e:	e002      	b.n	8001da6 <UART_SetConfig+0x20a>
 8001da0:	4602      	mov	r2, r0
 8001da2:	e000      	b.n	8001da6 <UART_SetConfig+0x20a>
    case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8001da4:	2201      	movs	r2, #1
    }
  }

  return ret;

}
 8001da6:	4610      	mov	r0, r2
 8001da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001daa:	bf00      	nop
 8001dac:	efff69f3 	.word	0xefff69f3
 8001db0:	40008000 	.word	0x40008000
 8001db4:	40013800 	.word	0x40013800
 8001db8:	08002614 	.word	0x08002614
 8001dbc:	40004400 	.word	0x40004400
 8001dc0:	08002618 	.word	0x08002618
 8001dc4:	00f42400 	.word	0x00f42400
 8001dc8:	f4240000 	.word	0xf4240000
 8001dcc:	000ffcff 	.word	0x000ffcff

08001dd0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001dd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001dd2:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001dd4:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001dd6:	d506      	bpl.n	8001de6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001dd8:	6804      	ldr	r4, [r0, #0]
 8001dda:	6862      	ldr	r2, [r4, #4]
 8001ddc:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8001de0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001de2:	430a      	orrs	r2, r1
 8001de4:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001de6:	079c      	lsls	r4, r3, #30
 8001de8:	d506      	bpl.n	8001df8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001dea:	6804      	ldr	r4, [r0, #0]
 8001dec:	6862      	ldr	r2, [r4, #4]
 8001dee:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8001df2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8001df4:	430a      	orrs	r2, r1
 8001df6:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001df8:	0759      	lsls	r1, r3, #29
 8001dfa:	d506      	bpl.n	8001e0a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001dfc:	6804      	ldr	r4, [r0, #0]
 8001dfe:	6862      	ldr	r2, [r4, #4]
 8001e00:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8001e04:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001e06:	430a      	orrs	r2, r1
 8001e08:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001e0a:	071a      	lsls	r2, r3, #28
 8001e0c:	d506      	bpl.n	8001e1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001e0e:	6804      	ldr	r4, [r0, #0]
 8001e10:	6862      	ldr	r2, [r4, #4]
 8001e12:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8001e16:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001e1c:	06dc      	lsls	r4, r3, #27
 8001e1e:	d506      	bpl.n	8001e2e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001e20:	6804      	ldr	r4, [r0, #0]
 8001e22:	68a2      	ldr	r2, [r4, #8]
 8001e24:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8001e28:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001e2e:	0699      	lsls	r1, r3, #26
 8001e30:	d506      	bpl.n	8001e40 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001e32:	6804      	ldr	r4, [r0, #0]
 8001e34:	68a2      	ldr	r2, [r4, #8]
 8001e36:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8001e3a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001e40:	065a      	lsls	r2, r3, #25
 8001e42:	d50f      	bpl.n	8001e64 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e44:	6801      	ldr	r1, [r0, #0]
 8001e46:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001e48:	684a      	ldr	r2, [r1, #4]
 8001e4a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001e4e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e50:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e54:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e56:	d105      	bne.n	8001e64 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001e58:	684a      	ldr	r2, [r1, #4]
 8001e5a:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 8001e5e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001e60:	4322      	orrs	r2, r4
 8001e62:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001e64:	061b      	lsls	r3, r3, #24
 8001e66:	d506      	bpl.n	8001e76 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001e68:	6801      	ldr	r1, [r0, #0]
 8001e6a:	684b      	ldr	r3, [r1, #4]
 8001e6c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8001e70:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
 8001e76:	bd10      	pop	{r4, pc}

08001e78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e7c:	9d06      	ldr	r5, [sp, #24]
 8001e7e:	4604      	mov	r4, r0
 8001e80:	460f      	mov	r7, r1
 8001e82:	4616      	mov	r6, r2
 8001e84:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e86:	6821      	ldr	r1, [r4, #0]
 8001e88:	69ca      	ldr	r2, [r1, #28]
 8001e8a:	ea37 0302 	bics.w	r3, r7, r2
 8001e8e:	bf0c      	ite	eq
 8001e90:	2201      	moveq	r2, #1
 8001e92:	2200      	movne	r2, #0
 8001e94:	42b2      	cmp	r2, r6
 8001e96:	d11d      	bne.n	8001ed4 <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001e98:	1c6b      	adds	r3, r5, #1
 8001e9a:	d0f5      	beq.n	8001e88 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001e9c:	b99d      	cbnz	r5, 8001ec6 <UART_WaitOnFlagUntilTimeout+0x4e>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e9e:	6823      	ldr	r3, [r4, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001ea6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	f022 0201 	bic.w	r2, r2, #1
 8001eae:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8001eb0:	2320      	movs	r3, #32
 8001eb2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001eb6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001eba:	2300      	movs	r3, #0
 8001ebc:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001ec0:	2003      	movs	r0, #3
 8001ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001ec6:	f7fe fb35 	bl	8000534 <HAL_GetTick>
 8001eca:	ebc8 0000 	rsb	r0, r8, r0
 8001ece:	4285      	cmp	r5, r0
 8001ed0:	d2d9      	bcs.n	8001e86 <UART_WaitOnFlagUntilTimeout+0xe>
 8001ed2:	e7e4      	b.n	8001e9e <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001ed4:	2000      	movs	r0, #0
}
 8001ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001eda <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001eda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001edc:	4604      	mov	r4, r0
  uint32_t tickstart = 0;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ede:	2600      	movs	r6, #0
 8001ee0:	66c6      	str	r6, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001ee2:	f7fe fb27 	bl	8000534 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	071a      	lsls	r2, r3, #28

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001eec:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001eee:	d404      	bmi.n	8001efa <UART_CheckIdleState+0x20>
      /* Timeout occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	075b      	lsls	r3, r3, #29
 8001ef6:	d51a      	bpl.n	8001f2e <UART_CheckIdleState+0x54>
 8001ef8:	e00d      	b.n	8001f16 <UART_CheckIdleState+0x3c>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001efa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	4632      	mov	r2, r6
 8001f02:	4603      	mov	r3, r0
 8001f04:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001f08:	4620      	mov	r0, r4
 8001f0a:	f7ff ffb5 	bl	8001e78 <UART_WaitOnFlagUntilTimeout>
 8001f0e:	2800      	cmp	r0, #0
 8001f10:	d0ee      	beq.n	8001ef0 <UART_CheckIdleState+0x16>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001f12:	2003      	movs	r0, #3
 8001f14:	e013      	b.n	8001f3e <UART_CheckIdleState+0x64>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f16:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001f1a:	9300      	str	r3, [sp, #0]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	462b      	mov	r3, r5
 8001f20:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001f24:	4620      	mov	r0, r4
 8001f26:	f7ff ffa7 	bl	8001e78 <UART_WaitOnFlagUntilTimeout>
 8001f2a:	2800      	cmp	r0, #0
 8001f2c:	d1f1      	bne.n	8001f12 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8001f2e:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001f30:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8001f32:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001f36:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8001f3a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 8001f3e:	b002      	add	sp, #8
 8001f40:	bd70      	pop	{r4, r5, r6, pc}

08001f42 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f42:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001f44:	4604      	mov	r4, r0
 8001f46:	b360      	cbz	r0, 8001fa2 <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001f48:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001f4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f50:	b91b      	cbnz	r3, 8001f5a <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f52:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f56:	f000 faa5 	bl	80024a4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001f5a:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f5c:	2324      	movs	r3, #36	; 0x24
 8001f5e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001f62:	6813      	ldr	r3, [r2, #0]
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	f7ff fe16 	bl	8001b9c <UART_SetConfig>
 8001f70:	2801      	cmp	r0, #1
 8001f72:	d016      	beq.n	8001fa2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f76:	b113      	cbz	r3, 8001f7e <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 8001f78:	4620      	mov	r0, r4
 8001f7a:	f7ff ff29 	bl	8001dd0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f7e:	6823      	ldr	r3, [r4, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f8e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f96:	4620      	mov	r0, r4
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001f98:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8001f9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f9e:	f7ff bf9c 	b.w	8001eda <UART_CheckIdleState>
}
 8001fa2:	2001      	movs	r0, #1
 8001fa4:	bd10      	pop	{r4, pc}
	...

08001fa8 <deBounceInit>:
#include <stdint.h>
#include "stm32l4xx_hal.h"
#include "stm32l4xx_hal_gpio.h"

void deBounceInit(int16_t pin, char port, int8_t mode)
{
 8001fa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct;
	/*Configure GPIO pin : */
	switch(pin)
 8001faa:	280f      	cmp	r0, #15
 8001fac:	d831      	bhi.n	8002012 <deBounceInit+0x6a>
 8001fae:	e8df f000 	tbb	[pc, r0]
 8001fb2:	0a08      	.short	0x0a08
 8001fb4:	12100e0c 	.word	0x12100e0c
 8001fb8:	1b181614 	.word	0x1b181614
 8001fbc:	2724211e 	.word	0x2724211e
 8001fc0:	2d2a      	.short	0x2d2a
	{
		case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e024      	b.n	8002010 <deBounceInit+0x68>
		case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e022      	b.n	8002010 <deBounceInit+0x68>
		case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 8001fca:	2304      	movs	r3, #4
 8001fcc:	e020      	b.n	8002010 <deBounceInit+0x68>
		case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 8001fce:	2308      	movs	r3, #8
 8001fd0:	e01e      	b.n	8002010 <deBounceInit+0x68>
		case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 8001fd2:	2310      	movs	r3, #16
 8001fd4:	e01c      	b.n	8002010 <deBounceInit+0x68>
		case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 8001fd6:	2320      	movs	r3, #32
 8001fd8:	e01a      	b.n	8002010 <deBounceInit+0x68>
		case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 8001fda:	2340      	movs	r3, #64	; 0x40
 8001fdc:	e018      	b.n	8002010 <deBounceInit+0x68>
		case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	e016      	b.n	8002010 <deBounceInit+0x68>
		case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 8001fe2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fe6:	e013      	b.n	8002010 <deBounceInit+0x68>
		case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 8001fe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fec:	e010      	b.n	8002010 <deBounceInit+0x68>
		case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 8001fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ff2:	e00d      	b.n	8002010 <deBounceInit+0x68>
		case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 8001ff4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ff8:	e00a      	b.n	8002010 <deBounceInit+0x68>
		case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 8001ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ffe:	e007      	b.n	8002010 <deBounceInit+0x68>
		case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 8002000:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002004:	e004      	b.n	8002010 <deBounceInit+0x68>
		case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 8002006:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800200a:	e001      	b.n	8002010 <deBounceInit+0x68>
		case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 800200c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002010:	9301      	str	r3, [sp, #4]
	}
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002012:	2300      	movs	r3, #0
 8002014:	9302      	str	r3, [sp, #8]
	switch (mode)
 8002016:	b11a      	cbz	r2, 8002020 <deBounceInit+0x78>
 8002018:	2a01      	cmp	r2, #1
 800201a:	d103      	bne.n	8002024 <deBounceInit+0x7c>
	{
		case 0: GPIO_InitStruct.Pull = GPIO_PULLDOWN; break;
		case 1: GPIO_InitStruct.Pull = GPIO_PULLUP; break;
 800201c:	9203      	str	r2, [sp, #12]
 800201e:	e001      	b.n	8002024 <deBounceInit+0x7c>
		case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
	}
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	switch (mode)
	{
		case 0: GPIO_InitStruct.Pull = GPIO_PULLDOWN; break;
 8002020:	2302      	movs	r3, #2
 8002022:	9303      	str	r3, [sp, #12]
		case 1: GPIO_InitStruct.Pull = GPIO_PULLUP; break;
	}
	switch (port)
 8002024:	2942      	cmp	r1, #66	; 0x42
 8002026:	d007      	beq.n	8002038 <deBounceInit+0x90>
 8002028:	2943      	cmp	r1, #67	; 0x43
 800202a:	d008      	beq.n	800203e <deBounceInit+0x96>
 800202c:	2941      	cmp	r1, #65	; 0x41
 800202e:	d10a      	bne.n	8002046 <deBounceInit+0x9e>
	{
		case 'A': HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); break;
 8002030:	a901      	add	r1, sp, #4
 8002032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002036:	e004      	b.n	8002042 <deBounceInit+0x9a>
		case 'B': HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); break;
 8002038:	a901      	add	r1, sp, #4
 800203a:	4807      	ldr	r0, [pc, #28]	; (8002058 <deBounceInit+0xb0>)
 800203c:	e001      	b.n	8002042 <deBounceInit+0x9a>
		case 'C': HAL_GPIO_Init(GPIOC, &GPIO_InitStruct); break;
 800203e:	4807      	ldr	r0, [pc, #28]	; (800205c <deBounceInit+0xb4>)
 8002040:	a901      	add	r1, sp, #4
 8002042:	f7fe faf9 	bl	8000638 <HAL_GPIO_Init>
	}
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002046:	a901      	add	r1, sp, #4
 8002048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800204c:	f7fe faf4 	bl	8000638 <HAL_GPIO_Init>
}
 8002050:	b007      	add	sp, #28
 8002052:	f85d fb04 	ldr.w	pc, [sp], #4
 8002056:	bf00      	nop
 8002058:	48000400 	.word	0x48000400
 800205c:	48000800 	.word	0x48000800

08002060 <deBounceReadPin>:

int8_t deBounceReadPin(int16_t pin, char port, int8_t stableInterval)
{
 8002060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002064:	4605      	mov	r5, r0
 8002066:	460f      	mov	r7, r1
 8002068:	4691      	mov	r9, r2
	GPIO_PinState pinState = GPIO_PIN_RESET;	//remember variables should be initialized
	int8_t pinStateWeAreLookingFor = 0;
	int32_t msTimeStamp = HAL_GetTick();		//get a timeStamp in ms
 800206a:	f7fe fa63 	bl	8000534 <HAL_GetTick>
 800206e:	4680      	mov	r8, r0

	GPIO_InitTypeDef GPIO_InitStruct;
		/*Configure GPIO pin : */
		switch(pin)
 8002070:	2d0f      	cmp	r5, #15
 8002072:	d830      	bhi.n	80020d6 <deBounceReadPin+0x76>
 8002074:	e8df f005 	tbb	[pc, r5]
 8002078:	0e0c0a08 	.word	0x0e0c0a08
 800207c:	16141210 	.word	0x16141210
 8002080:	211e1b18 	.word	0x211e1b18
 8002084:	2d2a2724 	.word	0x2d2a2724
		{
			case 0: GPIO_InitStruct.Pin = GPIO_PIN_0; break;
 8002088:	2401      	movs	r4, #1
 800208a:	e024      	b.n	80020d6 <deBounceReadPin+0x76>
			case 1: GPIO_InitStruct.Pin = GPIO_PIN_1; break;
 800208c:	2402      	movs	r4, #2
 800208e:	e022      	b.n	80020d6 <deBounceReadPin+0x76>
			case 2: GPIO_InitStruct.Pin = GPIO_PIN_2; break;
 8002090:	2404      	movs	r4, #4
 8002092:	e020      	b.n	80020d6 <deBounceReadPin+0x76>
			case 3: GPIO_InitStruct.Pin = GPIO_PIN_3; break;
 8002094:	2408      	movs	r4, #8
 8002096:	e01e      	b.n	80020d6 <deBounceReadPin+0x76>
			case 4: GPIO_InitStruct.Pin = GPIO_PIN_4; break;
 8002098:	2410      	movs	r4, #16
 800209a:	e01c      	b.n	80020d6 <deBounceReadPin+0x76>
			case 5: GPIO_InitStruct.Pin = GPIO_PIN_5; break;
 800209c:	2420      	movs	r4, #32
 800209e:	e01a      	b.n	80020d6 <deBounceReadPin+0x76>
			case 6: GPIO_InitStruct.Pin = GPIO_PIN_6; break;
 80020a0:	2440      	movs	r4, #64	; 0x40
 80020a2:	e018      	b.n	80020d6 <deBounceReadPin+0x76>
			case 7: GPIO_InitStruct.Pin = GPIO_PIN_7; break;
 80020a4:	2480      	movs	r4, #128	; 0x80
 80020a6:	e016      	b.n	80020d6 <deBounceReadPin+0x76>
			case 8: GPIO_InitStruct.Pin = GPIO_PIN_8; break;
 80020a8:	f44f 7480 	mov.w	r4, #256	; 0x100
 80020ac:	e013      	b.n	80020d6 <deBounceReadPin+0x76>
			case 9: GPIO_InitStruct.Pin = GPIO_PIN_9; break;
 80020ae:	f44f 7400 	mov.w	r4, #512	; 0x200
 80020b2:	e010      	b.n	80020d6 <deBounceReadPin+0x76>
			case 10: GPIO_InitStruct.Pin = GPIO_PIN_10; break;
 80020b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80020b8:	e00d      	b.n	80020d6 <deBounceReadPin+0x76>
			case 11: GPIO_InitStruct.Pin = GPIO_PIN_11; break;
 80020ba:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80020be:	e00a      	b.n	80020d6 <deBounceReadPin+0x76>
			case 12: GPIO_InitStruct.Pin = GPIO_PIN_12; break;
 80020c0:	f44f 5480 	mov.w	r4, #4096	; 0x1000
 80020c4:	e007      	b.n	80020d6 <deBounceReadPin+0x76>
			case 13: GPIO_InitStruct.Pin = GPIO_PIN_13; break;
 80020c6:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 80020ca:	e004      	b.n	80020d6 <deBounceReadPin+0x76>
			case 14: GPIO_InitStruct.Pin = GPIO_PIN_14; break;
 80020cc:	f44f 4480 	mov.w	r4, #16384	; 0x4000
 80020d0:	e001      	b.n	80020d6 <deBounceReadPin+0x76>
			case 15: GPIO_InitStruct.Pin = GPIO_PIN_15; break;
 80020d2:	f44f 4400 	mov.w	r4, #32768	; 0x8000
		}


	/* let's do our first read of the pin
	 * and to do that we need to incorporate the port we're going to read*/
	switch (port)
 80020d6:	2f42      	cmp	r7, #66	; 0x42
 80020d8:	d007      	beq.n	80020ea <deBounceReadPin+0x8a>
 80020da:	2f43      	cmp	r7, #67	; 0x43
 80020dc:	d008      	beq.n	80020f0 <deBounceReadPin+0x90>
 80020de:	2f41      	cmp	r7, #65	; 0x41
 80020e0:	d10c      	bne.n	80020fc <deBounceReadPin+0x9c>
	{
		case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 80020e2:	b2a1      	uxth	r1, r4
 80020e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e8:	e004      	b.n	80020f4 <deBounceReadPin+0x94>
		case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 80020ea:	b2a1      	uxth	r1, r4
 80020ec:	4817      	ldr	r0, [pc, #92]	; (800214c <deBounceReadPin+0xec>)
 80020ee:	e001      	b.n	80020f4 <deBounceReadPin+0x94>
		case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 80020f0:	4817      	ldr	r0, [pc, #92]	; (8002150 <deBounceReadPin+0xf0>)
 80020f2:	b2a1      	uxth	r1, r4
 80020f4:	f7fe fb5c 	bl	80007b0 <HAL_GPIO_ReadPin>
 80020f8:	4605      	mov	r5, r0
	}
	/* is the GPIO pin high or low 	 */
	if(pinState == GPIO_PIN_RESET )		// if low we're looking for more 0's
 80020fa:	b910      	cbnz	r0, 8002102 <deBounceReadPin+0xa2>
	{
		pinStateWeAreLookingFor = 0;
 80020fc:	2600      	movs	r6, #0
 80020fe:	4635      	mov	r5, r6
 8002100:	e000      	b.n	8002104 <deBounceReadPin+0xa4>
	}
	else
	{//we're looking for more 1's
		pinStateWeAreLookingFor = 1;
 8002102:	2601      	movs	r6, #1
	{

		switch (port)
		{
			case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
			case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 8002104:	b2a4      	uxth	r4, r4
	{//we're looking for more 1's
		pinStateWeAreLookingFor = 1;
	}

	/* now, let's read the pin again until x stable ms have elapsed */
	while (HAL_GetTick() < (msTimeStamp + stableInterval))
 8002106:	f7fe fa15 	bl	8000534 <HAL_GetTick>
 800210a:	eb09 0308 	add.w	r3, r9, r8
 800210e:	4298      	cmp	r0, r3
 8002110:	d219      	bcs.n	8002146 <deBounceReadPin+0xe6>
	{

		switch (port)
 8002112:	2f42      	cmp	r7, #66	; 0x42
 8002114:	d007      	beq.n	8002126 <deBounceReadPin+0xc6>
 8002116:	2f43      	cmp	r7, #67	; 0x43
 8002118:	d008      	beq.n	800212c <deBounceReadPin+0xcc>
 800211a:	2f41      	cmp	r7, #65	; 0x41
 800211c:	d10b      	bne.n	8002136 <deBounceReadPin+0xd6>
		{
			case 'A': pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_InitStruct.Pin); break;
 800211e:	4621      	mov	r1, r4
 8002120:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002124:	e004      	b.n	8002130 <deBounceReadPin+0xd0>
			case 'B': pinState = HAL_GPIO_ReadPin(GPIOB, GPIO_InitStruct.Pin); break;
 8002126:	4621      	mov	r1, r4
 8002128:	4808      	ldr	r0, [pc, #32]	; (800214c <deBounceReadPin+0xec>)
 800212a:	e001      	b.n	8002130 <deBounceReadPin+0xd0>
			case 'C': pinState = HAL_GPIO_ReadPin(GPIOC, GPIO_InitStruct.Pin); break;
 800212c:	4808      	ldr	r0, [pc, #32]	; (8002150 <deBounceReadPin+0xf0>)
 800212e:	4621      	mov	r1, r4
 8002130:	f7fe fb3e 	bl	80007b0 <HAL_GPIO_ReadPin>
 8002134:	4605      	mov	r5, r0
		}
		if(pinState != pinStateWeAreLookingFor)
 8002136:	42b5      	cmp	r5, r6
 8002138:	d0e5      	beq.n	8002106 <deBounceReadPin+0xa6>
		{
			pinStateWeAreLookingFor = !pinStateWeAreLookingFor;
			/* reset the timeStamp as we've had a change in state			 */
			msTimeStamp = HAL_GetTick();
 800213a:	f7fe f9fb 	bl	8000534 <HAL_GetTick>
 800213e:	f086 0601 	eor.w	r6, r6, #1
 8002142:	4680      	mov	r8, r0
 8002144:	e7df      	b.n	8002106 <deBounceReadPin+0xa6>
		}
	}
	return (pinStateWeAreLookingFor);
}
 8002146:	4630      	mov	r0, r6
 8002148:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800214c:	48000400 	.word	0x48000400
 8002150:	48000800 	.word	0x48000800

08002154 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8002154:	b530      	push	{r4, r5, lr}
 8002156:	b0ad      	sub	sp, #180	; 0xb4
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002158:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800215a:	2200      	movs	r2, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800215c:	2501      	movs	r5, #1
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800215e:	2402      	movs	r4, #2
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002160:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002162:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
 8002164:	9313      	str	r3, [sp, #76]	; 0x4c
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002166:	2260      	movs	r2, #96	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002168:	2307      	movs	r3, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800216a:	a806      	add	r0, sp, #24
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800216c:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800216e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002170:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002172:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002174:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 16;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002176:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002178:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800217a:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800217c:	f7fe fc42 	bl	8000a04 <HAL_RCC_OscConfig>
 8002180:	b100      	cbz	r0, 8002184 <SystemClock_Config+0x30>
 8002182:	e7fe      	b.n	8002182 <SystemClock_Config+0x2e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002184:	230f      	movs	r3, #15
 8002186:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002188:	9003      	str	r0, [sp, #12]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800218a:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800218c:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800218e:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002190:	4629      	mov	r1, r5
 8002192:	a801      	add	r0, sp, #4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002194:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002196:	f7fe fea7 	bl	8000ee8 <HAL_RCC_ClockConfig>
 800219a:	b100      	cbz	r0, 800219e <SystemClock_Config+0x4a>
 800219c:	e7fe      	b.n	800219c <SystemClock_Config+0x48>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800219e:	9020      	str	r0, [sp, #128]	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021a0:	a817      	add	r0, sp, #92	; 0x5c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80021a2:	9417      	str	r4, [sp, #92]	; 0x5c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021a4:	f7ff f846 	bl	8001234 <HAL_RCCEx_PeriphCLKConfig>
 80021a8:	b100      	cbz	r0, 80021ac <SystemClock_Config+0x58>
 80021aa:	e7fe      	b.n	80021aa <SystemClock_Config+0x56>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80021ac:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021b0:	f7fe fb12 	bl	80007d8 <HAL_PWREx_ControlVoltageScaling>
 80021b4:	4604      	mov	r4, r0
 80021b6:	b100      	cbz	r0, 80021ba <SystemClock_Config+0x66>
 80021b8:	e7fe      	b.n	80021b8 <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80021ba:	f7fe ff4d 	bl	8001058 <HAL_RCC_GetHCLKFreq>
 80021be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80021c6:	f7fe fa0f 	bl	80005e8 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80021ca:	2004      	movs	r0, #4
 80021cc:	f7fe fa22 	bl	8000614 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80021d0:	4622      	mov	r2, r4
 80021d2:	4621      	mov	r1, r4
 80021d4:	f04f 30ff 	mov.w	r0, #4294967295
 80021d8:	f7fe f9d2 	bl	8000580 <HAL_NVIC_SetPriority>
}
 80021dc:	b02d      	add	sp, #180	; 0xb4
 80021de:	bd30      	pop	{r4, r5, pc}

080021e0 <ILLUMINATE_RGB>:
}

/* USER CODE BEGIN 4 */
void ILLUMINATE_RGB(){

	if(count==1){
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <ILLUMINATE_RGB+0x34>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <ILLUMINATE_RGB+0x38>)
 80021e6:	2a01      	cmp	r2, #1
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100 );
 80021e8:	681b      	ldr	r3, [r3, #0]
}

/* USER CODE BEGIN 4 */
void ILLUMINATE_RGB(){

	if(count==1){
 80021ea:	d102      	bne.n	80021f2 <ILLUMINATE_RGB+0x12>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100 );
 80021ec:	2264      	movs	r2, #100	; 0x64
 80021ee:	635a      	str	r2, [r3, #52]	; 0x34
 80021f0:	e004      	b.n	80021fc <ILLUMINATE_RGB+0x1c>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100 );
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,200 );
		}
	else if(count==2){
 80021f2:	2a02      	cmp	r2, #2
 80021f4:	d105      	bne.n	8002202 <ILLUMINATE_RGB+0x22>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50);
 80021f6:	2232      	movs	r2, #50	; 0x32
 80021f8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 150);
 80021fa:	2296      	movs	r2, #150	; 0x96
 80021fc:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 200);
 80021fe:	22c8      	movs	r2, #200	; 0xc8
 8002200:	e003      	b.n	800220a <ILLUMINATE_RGB+0x2a>
	}
	else {
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 200);
 8002206:	22c8      	movs	r2, #200	; 0xc8
 8002208:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 200);
 800220a:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	HAL_Delay(1000);
 800220c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002210:	f7fe b996 	b.w	8000540 <HAL_Delay>
 8002214:	20000020 	.word	0x20000020
 8002218:	20000028 	.word	0x20000028

0800221c <main>:


/* USER CODE END 0 */

int main(void)
{
 800221c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221e:	b09d      	sub	sp, #116	; 0x74
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002220:	f7fe f974 	bl	800050c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002224:	f7ff ff96 	bl	8002154 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002228:	4b5d      	ldr	r3, [pc, #372]	; (80023a0 <main+0x184>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3, GPIO_PIN_RESET);
 800222a:	485e      	ldr	r0, [pc, #376]	; (80023a4 <main+0x188>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800222c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800222e:	f042 0204 	orr.w	r2, r2, #4
 8002232:	64da      	str	r2, [r3, #76]	; 0x4c
 8002234:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002236:	f002 0204 	and.w	r2, r2, #4
 800223a:	9200      	str	r2, [sp, #0]
 800223c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800223e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002240:	f042 0201 	orr.w	r2, r2, #1
 8002244:	64da      	str	r2, [r3, #76]	; 0x4c
 8002246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002248:	f002 0201 	and.w	r2, r2, #1
 800224c:	9201      	str	r2, [sp, #4]
 800224e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002250:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002252:	f042 0202 	orr.w	r2, r2, #2
 8002256:	64da      	str	r2, [r3, #76]	; 0x4c
 8002258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	9302      	str	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3, GPIO_PIN_RESET);
 8002260:	2200      	movs	r2, #0
 8002262:	2108      	movs	r1, #8

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002266:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002268:	2508      	movs	r5, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3, GPIO_PIN_RESET);
 800226a:	f7fe faa7 	bl	80007bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226e:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002270:	a911      	add	r1, sp, #68	; 0x44
 8002272:	484c      	ldr	r0, [pc, #304]	; (80023a4 <main+0x188>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3, GPIO_PIN_RESET);

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002274:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002276:	9612      	str	r6, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800227c:	f7fe f9dc 	bl	8000638 <HAL_GPIO_Init>

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8002280:	4849      	ldr	r0, [pc, #292]	; (80023a8 <main+0x18c>)
  huart2.Init.BaudRate = 9600;
 8002282:	494a      	ldr	r1, [pc, #296]	; (80023ac <main+0x190>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002284:	6084      	str	r4, [r0, #8]
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
 8002286:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800228a:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800228e:	230c      	movs	r3, #12
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002290:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002292:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002294:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002296:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002298:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800229a:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800229c:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800229e:	f7ff fe50 	bl	8001f42 <HAL_UART_Init>
 80022a2:	b100      	cbz	r0, 80022a6 <main+0x8a>
 80022a4:	e7fe      	b.n	80022a4 <main+0x88>
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 80022a6:	4c42      	ldr	r4, [pc, #264]	; (80023b0 <main+0x194>)
  htim1.Init.Prescaler = 7;
 80022a8:	4a42      	ldr	r2, [pc, #264]	; (80023b4 <main+0x198>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022aa:	60a0      	str	r0, [r4, #8]
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 7;
 80022ac:	2307      	movs	r3, #7
 80022ae:	e884 000c 	stmia.w	r4, {r2, r3}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 399;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b2:	6120      	str	r0, [r4, #16]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 7;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 399;
 80022b4:	f240 138f 	movw	r3, #399	; 0x18f
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
 80022b8:	6160      	str	r0, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022ba:	4620      	mov	r0, r4
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 7;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 399;
 80022bc:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022be:	f7ff fa2b 	bl	8001718 <HAL_TIM_Base_Init>
 80022c2:	b100      	cbz	r0, 80022c6 <main+0xaa>
 80022c4:	e7fe      	b.n	80022c4 <main+0xa8>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022c6:	a91c      	add	r1, sp, #112	; 0x70
 80022c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022cc:	f841 3d58 	str.w	r3, [r1, #-88]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022d0:	4620      	mov	r0, r4
 80022d2:	f7ff fb1f 	bl	8001914 <HAL_TIM_ConfigClockSource>
 80022d6:	b100      	cbz	r0, 80022da <main+0xbe>
 80022d8:	e7fe      	b.n	80022d8 <main+0xbc>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80022da:	4620      	mov	r0, r4
 80022dc:	f7ff fa36 	bl	800174c <HAL_TIM_PWM_Init>
 80022e0:	b100      	cbz	r0, 80022e4 <main+0xc8>
 80022e2:	e7fe      	b.n	80022e2 <main+0xc6>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e4:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022e6:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e8:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022ea:	a903      	add	r1, sp, #12
 80022ec:	4620      	mov	r0, r4
 80022ee:	f7ff fbf5 	bl	8001adc <HAL_TIMEx_MasterConfigSynchronization>
 80022f2:	4602      	mov	r2, r0
 80022f4:	b100      	cbz	r0, 80022f8 <main+0xdc>
 80022f6:	e7fe      	b.n	80022f6 <main+0xda>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022f8:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80022fa:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022fc:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022fe:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002300:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002302:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002304:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002306:	a90a      	add	r1, sp, #40	; 0x28
 8002308:	4620      	mov	r0, r4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800230a:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800230c:	f7ff fa72 	bl	80017f4 <HAL_TIM_PWM_ConfigChannel>
 8002310:	b100      	cbz	r0, 8002314 <main+0xf8>
 8002312:	e7fe      	b.n	8002312 <main+0xf6>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002314:	2204      	movs	r2, #4
 8002316:	a90a      	add	r1, sp, #40	; 0x28
 8002318:	4620      	mov	r0, r4
 800231a:	f7ff fa6b 	bl	80017f4 <HAL_TIM_PWM_ConfigChannel>
 800231e:	b100      	cbz	r0, 8002322 <main+0x106>
 8002320:	e7fe      	b.n	8002320 <main+0x104>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002322:	462a      	mov	r2, r5
 8002324:	a90a      	add	r1, sp, #40	; 0x28
 8002326:	4620      	mov	r0, r4
 8002328:	f7ff fa64 	bl	80017f4 <HAL_TIM_PWM_ConfigChannel>
 800232c:	b100      	cbz	r0, 8002330 <main+0x114>
 800232e:	e7fe      	b.n	800232e <main+0x112>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002334:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002336:	9012      	str	r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002338:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.DeadTime = 0;
 800233a:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800233c:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800233e:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002340:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002342:	9018      	str	r0, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002344:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002348:	901a      	str	r0, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800234a:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800234c:	a911      	add	r1, sp, #68	; 0x44
 800234e:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.BreakFilter = 0;
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002350:	9319      	str	r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2Filter = 0;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002352:	f7ff fbe5 	bl	8001b20 <HAL_TIMEx_ConfigBreakDeadTime>
 8002356:	4607      	mov	r7, r0
 8002358:	b100      	cbz	r0, 800235c <main+0x140>
 800235a:	e7fe      	b.n	800235a <main+0x13e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_TIM_MspPostInit(&htim1);
 800235c:	4620      	mov	r0, r4
 800235e:	f000 f887 	bl	8002470 <HAL_TIM_MspPostInit>
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_TIM1_Init();

  /* USER CODE BEGIN 2 */
deBounceInit(pbPin,'B', 0);
 8002362:	463a      	mov	r2, r7
 8002364:	2142      	movs	r1, #66	; 0x42
 8002366:	4630      	mov	r0, r6
 8002368:	f7ff fe1e 	bl	8001fa8 <deBounceInit>
HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800236c:	4639      	mov	r1, r7
 800236e:	4620      	mov	r0, r4
 8002370:	f7ff fb96 	bl	8001aa0 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8002374:	2104      	movs	r1, #4
 8002376:	4620      	mov	r0, r4
 8002378:	f7ff fb92 	bl	8001aa0 <HAL_TIM_PWM_Start>
HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 800237c:	4620      	mov	r0, r4
 800237e:	4629      	mov	r1, r5
 8002380:	f7ff fb8e 	bl	8001aa0 <HAL_TIM_PWM_Start>

  /* USER CODE BEGIN 3 */
	  int8_t input=0;
	  input = deBounceReadPin(pbPin,'B',10);
	  if(input==1){
	  count++;
 8002384:	4c0c      	ldr	r4, [pc, #48]	; (80023b8 <main+0x19c>)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  int8_t input=0;
	  input = deBounceReadPin(pbPin,'B',10);
 8002386:	220a      	movs	r2, #10
 8002388:	2142      	movs	r1, #66	; 0x42
 800238a:	2001      	movs	r0, #1
 800238c:	f7ff fe68 	bl	8002060 <deBounceReadPin>
	  if(input==1){
 8002390:	2801      	cmp	r0, #1
 8002392:	d1f8      	bne.n	8002386 <main+0x16a>
	  count++;
 8002394:	6823      	ldr	r3, [r4, #0]
 8002396:	3301      	adds	r3, #1
 8002398:	6023      	str	r3, [r4, #0]
	  ILLUMINATE_RGB();
 800239a:	f7ff ff21 	bl	80021e0 <ILLUMINATE_RGB>
 800239e:	e7f2      	b.n	8002386 <main+0x16a>
 80023a0:	40021000 	.word	0x40021000
 80023a4:	48000400 	.word	0x48000400
 80023a8:	20000064 	.word	0x20000064
 80023ac:	40004400 	.word	0x40004400
 80023b0:	20000028 	.word	0x20000028
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	20000020 	.word	0x20000020

080023bc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023bc:	4b21      	ldr	r3, [pc, #132]	; (8002444 <HAL_MspInit+0x88>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023be:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	661a      	str	r2, [r3, #96]	; 0x60
 80023c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023ca:	f002 0201 	and.w	r2, r2, #1
 80023ce:	9200      	str	r2, [sp, #0]
 80023d0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023d4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023d8:	659a      	str	r2, [r3, #88]	; 0x58
 80023da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023e0:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e2:	2003      	movs	r0, #3
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e4:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e6:	f7fe f8b9 	bl	800055c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80023ea:	2200      	movs	r2, #0
 80023ec:	4611      	mov	r1, r2
 80023ee:	f06f 000b 	mvn.w	r0, #11
 80023f2:	f7fe f8c5 	bl	8000580 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80023f6:	2200      	movs	r2, #0
 80023f8:	4611      	mov	r1, r2
 80023fa:	f06f 000a 	mvn.w	r0, #10
 80023fe:	f7fe f8bf 	bl	8000580 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	4611      	mov	r1, r2
 8002406:	f06f 0009 	mvn.w	r0, #9
 800240a:	f7fe f8b9 	bl	8000580 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	4611      	mov	r1, r2
 8002412:	f06f 0004 	mvn.w	r0, #4
 8002416:	f7fe f8b3 	bl	8000580 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800241a:	2200      	movs	r2, #0
 800241c:	4611      	mov	r1, r2
 800241e:	f06f 0003 	mvn.w	r0, #3
 8002422:	f7fe f8ad 	bl	8000580 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	4611      	mov	r1, r2
 800242a:	f06f 0001 	mvn.w	r0, #1
 800242e:	f7fe f8a7 	bl	8000580 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	4611      	mov	r1, r2
 8002436:	f04f 30ff 	mov.w	r0, #4294967295
 800243a:	f7fe f8a1 	bl	8000580 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800243e:	b003      	add	sp, #12
 8002440:	f85d fb04 	ldr.w	pc, [sp], #4
 8002444:	40021000 	.word	0x40021000

08002448 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 8002448:	6802      	ldr	r2, [r0, #0]
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <HAL_TIM_PWM_MspInit+0x24>)
 800244c:	429a      	cmp	r2, r3
  }

}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800244e:	b082      	sub	sp, #8

  if(htim_pwm->Instance==TIM1)
 8002450:	d10a      	bne.n	8002468 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002452:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8002456:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002458:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800245c:	661a      	str	r2, [r3, #96]	; 0x60
 800245e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002464:	9301      	str	r3, [sp, #4]
 8002466:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002468:	b002      	add	sp, #8
 800246a:	4770      	bx	lr
 800246c:	40012c00 	.word	0x40012c00

08002470 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002470:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8002472:	6802      	ldr	r2, [r0, #0]
 8002474:	4b0a      	ldr	r3, [pc, #40]	; (80024a0 <HAL_TIM_MspPostInit+0x30>)
 8002476:	429a      	cmp	r2, r3
 8002478:	d10e      	bne.n	8002498 <HAL_TIM_MspPostInit+0x28>
    /**TIM1 GPIO Configuration    
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800247a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800247e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002488:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248a:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800248c:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002492:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002494:	f7fe f8d0 	bl	8000638 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002498:	b007      	add	sp, #28
 800249a:	f85d fb04 	ldr.w	pc, [sp], #4
 800249e:	bf00      	nop
 80024a0:	40012c00 	.word	0x40012c00

080024a4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024a4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80024a6:	6802      	ldr	r2, [r0, #0]
 80024a8:	4b15      	ldr	r3, [pc, #84]	; (8002500 <HAL_UART_MspInit+0x5c>)
 80024aa:	429a      	cmp	r2, r3
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024ac:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80024ae:	d125      	bne.n	80024fc <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024b0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b4:	2403      	movs	r4, #3
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80024b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80024bc:	659a      	str	r2, [r3, #88]	; 0x58
 80024be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c0:	9404      	str	r4, [sp, #16]
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80024ca:	2304      	movs	r3, #4
 80024cc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ce:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024d0:	2307      	movs	r3, #7
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024d2:	2501      	movs	r5, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80024d4:	a901      	add	r1, sp, #4
 80024d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024da:	9305      	str	r3, [sp, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024dc:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024de:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80024e0:	f7fe f8aa 	bl	8000638 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e8:	a901      	add	r1, sp, #4
 80024ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024ee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024f2:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f4:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80024f6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f8:	f7fe f89e 	bl	8000638 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024fc:	b006      	add	sp, #24
 80024fe:	bd70      	pop	{r4, r5, r6, pc}
 8002500:	40004400 	.word	0x40004400

08002504 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002504:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002506:	f7fe f80d 	bl	8000524 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800250a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800250e:	f7fe b88e 	b.w	800062e <HAL_SYSTICK_IRQHandler>
	...

08002514 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002514:	490f      	ldr	r1, [pc, #60]	; (8002554 <SystemInit+0x40>)
 8002516:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800251a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002522:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <SystemInit+0x44>)
 8002524:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002526:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800252e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8002536:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800253a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 800253c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002540:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002548:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800254a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800254c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002550:	608b      	str	r3, [r1, #8]
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00
 8002558:	40021000 	.word	0x40021000

0800255c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800255c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002594 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002560:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002562:	e003      	b.n	800256c <LoopCopyDataInit>

08002564 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002566:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002568:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800256a:	3104      	adds	r1, #4

0800256c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800256c:	480b      	ldr	r0, [pc, #44]	; (800259c <LoopForever+0xa>)
	ldr	r3, =_edata
 800256e:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002570:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002572:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002574:	d3f6      	bcc.n	8002564 <CopyDataInit>
	ldr	r2, =_sbss
 8002576:	4a0b      	ldr	r2, [pc, #44]	; (80025a4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002578:	e002      	b.n	8002580 <LoopFillZerobss>

0800257a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800257a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800257c:	f842 3b04 	str.w	r3, [r2], #4

08002580 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <LoopForever+0x16>)
	cmp	r2, r3
 8002582:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002584:	d3f9      	bcc.n	800257a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002586:	f7ff ffc5 	bl	8002514 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800258a:	f000 f811 	bl	80025b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800258e:	f7ff fe45 	bl	800221c <main>

08002592 <LoopForever>:

LoopForever:
    b LoopForever
 8002592:	e7fe      	b.n	8002592 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002594:	2000c000 	.word	0x2000c000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8002598:	08002680 	.word	0x08002680
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 800259c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80025a0:	20000004 	.word	0x20000004
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80025a4:	20000004 	.word	0x20000004
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80025a8:	200000d4 	.word	0x200000d4

080025ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025ac:	e7fe      	b.n	80025ac <ADC1_IRQHandler>
	...

080025b0 <__libc_init_array>:
 80025b0:	b570      	push	{r4, r5, r6, lr}
 80025b2:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <__libc_init_array+0x3c>)
 80025b4:	4c0e      	ldr	r4, [pc, #56]	; (80025f0 <__libc_init_array+0x40>)
 80025b6:	1ae4      	subs	r4, r4, r3
 80025b8:	10a4      	asrs	r4, r4, #2
 80025ba:	2500      	movs	r5, #0
 80025bc:	461e      	mov	r6, r3
 80025be:	42a5      	cmp	r5, r4
 80025c0:	d004      	beq.n	80025cc <__libc_init_array+0x1c>
 80025c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025c6:	4798      	blx	r3
 80025c8:	3501      	adds	r5, #1
 80025ca:	e7f8      	b.n	80025be <__libc_init_array+0xe>
 80025cc:	f000 f816 	bl	80025fc <_init>
 80025d0:	4c08      	ldr	r4, [pc, #32]	; (80025f4 <__libc_init_array+0x44>)
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <__libc_init_array+0x48>)
 80025d4:	1ae4      	subs	r4, r4, r3
 80025d6:	10a4      	asrs	r4, r4, #2
 80025d8:	2500      	movs	r5, #0
 80025da:	461e      	mov	r6, r3
 80025dc:	42a5      	cmp	r5, r4
 80025de:	d004      	beq.n	80025ea <__libc_init_array+0x3a>
 80025e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025e4:	4798      	blx	r3
 80025e6:	3501      	adds	r5, #1
 80025e8:	e7f8      	b.n	80025dc <__libc_init_array+0x2c>
 80025ea:	bd70      	pop	{r4, r5, r6, pc}
 80025ec:	08002678 	.word	0x08002678
 80025f0:	08002678 	.word	0x08002678
 80025f4:	0800267c 	.word	0x0800267c
 80025f8:	08002678 	.word	0x08002678

080025fc <_init>:
 80025fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025fe:	bf00      	nop
 8002600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002602:	bc08      	pop	{r3}
 8002604:	469e      	mov	lr, r3
 8002606:	4770      	bx	lr

08002608 <_fini>:
 8002608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800260a:	bf00      	nop
 800260c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800260e:	bc08      	pop	{r3}
 8002610:	469e      	mov	lr, r3
 8002612:	4770      	bx	lr
